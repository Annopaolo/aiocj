/*
* generated by Xtext
*/
grammar InternalAioc;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package org.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import org.services.AiocGrammarAccess;

}

@parser::members {
 
 	private AiocGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(AiocGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleAiocJ
entryRuleAiocJ 
:
{ before(grammarAccess.getAiocJRule()); }
	 ruleAiocJ
{ after(grammarAccess.getAiocJRule()); } 
	 EOF 
;

// Rule AiocJ
ruleAiocJ
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAiocJAccess().getAlternatives()); }
(rule__AiocJ__Alternatives)
{ after(grammarAccess.getAiocJAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAioc
entryRuleAioc 
:
{ before(grammarAccess.getAiocRule()); }
	 ruleAioc
{ after(grammarAccess.getAiocRule()); } 
	 EOF 
;

// Rule Aioc
ruleAioc
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAiocAccess().getGroup()); }
(rule__Aioc__Group__0)
{ after(grammarAccess.getAiocAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRule
entryRuleRule 
:
{ before(grammarAccess.getRuleRule()); }
	 ruleRule
{ after(grammarAccess.getRuleRule()); } 
	 EOF 
;

// Rule Rule
ruleRule
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRuleAccess().getGroup()); }
(rule__Rule__Group__0)
{ after(grammarAccess.getRuleAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleWhere
entryRuleWhere 
:
{ before(grammarAccess.getWhereRule()); }
	 ruleWhere
{ after(grammarAccess.getWhereRule()); } 
	 EOF 
;

// Rule Where
ruleWhere
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getWhereAccess().getWhereConditionAssignment()); }
(rule__Where__WhereConditionAssignment)
{ after(grammarAccess.getWhereAccess().getWhereConditionAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleWhereExpressionBasicTerm
entryRuleWhereExpressionBasicTerm 
:
{ before(grammarAccess.getWhereExpressionBasicTermRule()); }
	 ruleWhereExpressionBasicTerm
{ after(grammarAccess.getWhereExpressionBasicTermRule()); } 
	 EOF 
;

// Rule WhereExpressionBasicTerm
ruleWhereExpressionBasicTerm
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getWhereExpressionBasicTermAccess().getAlternatives()); }
(rule__WhereExpressionBasicTerm__Alternatives)
{ after(grammarAccess.getWhereExpressionBasicTermAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleWhereCompareCondition
entryRuleWhereCompareCondition 
:
{ before(grammarAccess.getWhereCompareConditionRule()); }
	 ruleWhereCompareCondition
{ after(grammarAccess.getWhereCompareConditionRule()); } 
	 EOF 
;

// Rule WhereCompareCondition
ruleWhereCompareCondition
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getWhereCompareConditionAccess().getGroup()); }
(rule__WhereCompareCondition__Group__0)
{ after(grammarAccess.getWhereCompareConditionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleWhereLogicOp
entryRuleWhereLogicOp 
:
{ before(grammarAccess.getWhereLogicOpRule()); }
	 ruleWhereLogicOp
{ after(grammarAccess.getWhereLogicOpRule()); } 
	 EOF 
;

// Rule WhereLogicOp
ruleWhereLogicOp
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getWhereLogicOpAccess().getAlternatives()); }
(rule__WhereLogicOp__Alternatives)
{ after(grammarAccess.getWhereLogicOpAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePreamble
entryRulePreamble 
:
{ before(grammarAccess.getPreambleRule()); }
	 rulePreamble
{ after(grammarAccess.getPreambleRule()); } 
	 EOF 
;

// Rule Preamble
rulePreamble
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPreambleAccess().getGroup()); }
(rule__Preamble__Group__0)
{ after(grammarAccess.getPreambleAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLocationDefinition
entryRuleLocationDefinition 
:
{ before(grammarAccess.getLocationDefinitionRule()); }
	 ruleLocationDefinition
{ after(grammarAccess.getLocationDefinitionRule()); } 
	 EOF 
;

// Rule LocationDefinition
ruleLocationDefinition
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLocationDefinitionAccess().getGroup()); }
(rule__LocationDefinition__Group__0)
{ after(grammarAccess.getLocationDefinitionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleChoreography
entryRuleChoreography 
:
{ before(grammarAccess.getChoreographyRule()); }
	 ruleChoreography
{ after(grammarAccess.getChoreographyRule()); } 
	 EOF 
;

// Rule Choreography
ruleChoreography
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getChoreographyAccess().getGroup()); }
(rule__Choreography__Group__0)
{ after(grammarAccess.getChoreographyAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSeqBlock
entryRuleSeqBlock 
:
{ before(grammarAccess.getSeqBlockRule()); }
	 ruleSeqBlock
{ after(grammarAccess.getSeqBlockRule()); } 
	 EOF 
;

// Rule SeqBlock
ruleSeqBlock
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSeqBlockAccess().getGroup()); }
(rule__SeqBlock__Group__0)
{ after(grammarAccess.getSeqBlockAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSkip
entryRuleSkip 
:
{ before(grammarAccess.getSkipRule()); }
	 ruleSkip
{ after(grammarAccess.getSkipRule()); } 
	 EOF 
;

// Rule Skip
ruleSkip
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSkipAccess().getSkipAssignment()); }
(rule__Skip__SkipAssignment)
{ after(grammarAccess.getSkipAccess().getSkipAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleInteraction
entryRuleInteraction 
:
{ before(grammarAccess.getInteractionRule()); }
	 ruleInteraction
{ after(grammarAccess.getInteractionRule()); } 
	 EOF 
;

// Rule Interaction
ruleInteraction
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getInteractionAccess().getGroup()); }
(rule__Interaction__Group__0)
{ after(grammarAccess.getInteractionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLocalCode
entryRuleLocalCode 
:
{ before(grammarAccess.getLocalCodeRule()); }
	 ruleLocalCode
{ after(grammarAccess.getLocalCodeRule()); } 
	 EOF 
;

// Rule LocalCode
ruleLocalCode
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLocalCodeAccess().getAlternatives()); }
(rule__LocalCode__Alternatives)
{ after(grammarAccess.getLocalCodeAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIfThenElse
entryRuleIfThenElse 
:
{ before(grammarAccess.getIfThenElseRule()); }
	 ruleIfThenElse
{ after(grammarAccess.getIfThenElseRule()); } 
	 EOF 
;

// Rule IfThenElse
ruleIfThenElse
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIfThenElseAccess().getGroup()); }
(rule__IfThenElse__Group__0)
{ after(grammarAccess.getIfThenElseAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleWhile
entryRuleWhile 
:
{ before(grammarAccess.getWhileRule()); }
	 ruleWhile
{ after(grammarAccess.getWhileRule()); } 
	 EOF 
;

// Rule While
ruleWhile
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getWhileAccess().getGroup()); }
(rule__While__Group__0)
{ after(grammarAccess.getWhileAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleScope
entryRuleScope 
:
{ before(grammarAccess.getScopeRule()); }
	 ruleScope
{ after(grammarAccess.getScopeRule()); } 
	 EOF 
;

// Rule Scope
ruleScope
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getScopeAccess().getGroup()); }
(rule__Scope__Group__0)
{ after(grammarAccess.getScopeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRoles
entryRuleRoles 
:
{ before(grammarAccess.getRolesRule()); }
	 ruleRoles
{ after(grammarAccess.getRolesRule()); } 
	 EOF 
;

// Rule Roles
ruleRoles
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRolesAccess().getGroup()); }
(rule__Roles__Group__0)
{ after(grammarAccess.getRolesAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNestedChoreography
entryRuleNestedChoreography 
:
{ before(grammarAccess.getNestedChoreographyRule()); }
	 ruleNestedChoreography
{ after(grammarAccess.getNestedChoreographyRule()); } 
	 EOF 
;

// Rule NestedChoreography
ruleNestedChoreography
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNestedChoreographyAccess().getGroup()); }
(rule__NestedChoreography__Group__0)
{ after(grammarAccess.getNestedChoreographyAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAssignmentSet
entryRuleAssignmentSet 
:
{ before(grammarAccess.getAssignmentSetRule()); }
	 ruleAssignmentSet
{ after(grammarAccess.getAssignmentSetRule()); } 
	 EOF 
;

// Rule AssignmentSet
ruleAssignmentSet
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAssignmentSetAccess().getGroup()); }
(rule__AssignmentSet__Group__0)
{ after(grammarAccess.getAssignmentSetAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAssignment
entryRuleAssignment 
:
{ before(grammarAccess.getAssignmentRule()); }
	 ruleAssignment
{ after(grammarAccess.getAssignmentRule()); } 
	 EOF 
;

// Rule Assignment
ruleAssignment
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAssignmentAccess().getGroup()); }
(rule__Assignment__Group__0)
{ after(grammarAccess.getAssignmentAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExpression
entryRuleExpression 
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExpressionAccess().getSumExpressionAssignment()); }
(rule__Expression__SumExpressionAssignment)
{ after(grammarAccess.getExpressionAccess().getSumExpressionAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSumExpression
entryRuleSumExpression 
:
{ before(grammarAccess.getSumExpressionRule()); }
	 ruleSumExpression
{ after(grammarAccess.getSumExpressionRule()); } 
	 EOF 
;

// Rule SumExpression
ruleSumExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSumExpressionAccess().getGroup()); }
(rule__SumExpression__Group__0)
{ after(grammarAccess.getSumExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSumExpressionTerm
entryRuleSumExpressionTerm 
:
{ before(grammarAccess.getSumExpressionTermRule()); }
	 ruleSumExpressionTerm
{ after(grammarAccess.getSumExpressionTermRule()); } 
	 EOF 
;

// Rule SumExpressionTerm
ruleSumExpressionTerm
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSumExpressionTermAccess().getAlternatives()); }
(rule__SumExpressionTerm__Alternatives)
{ after(grammarAccess.getSumExpressionTermAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExpressionBasicTerm
entryRuleExpressionBasicTerm 
:
{ before(grammarAccess.getExpressionBasicTermRule()); }
	 ruleExpressionBasicTerm
{ after(grammarAccess.getExpressionBasicTermRule()); } 
	 EOF 
;

// Rule ExpressionBasicTerm
ruleExpressionBasicTerm
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExpressionBasicTermAccess().getAlternatives()); }
(rule__ExpressionBasicTerm__Alternatives)
{ after(grammarAccess.getExpressionBasicTermAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleConstant
entryRuleConstant 
:
{ before(grammarAccess.getConstantRule()); }
	 ruleConstant
{ after(grammarAccess.getConstantRule()); } 
	 EOF 
;

// Rule Constant
ruleConstant
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getConstantAccess().getAlternatives()); }
(rule__Constant__Alternatives)
{ after(grammarAccess.getConstantAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCondition
entryRuleCondition 
:
{ before(grammarAccess.getConditionRule()); }
	 ruleCondition
{ after(grammarAccess.getConditionRule()); } 
	 EOF 
;

// Rule Condition
ruleCondition
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getConditionAccess().getCompareConditionAssignment()); }
(rule__Condition__CompareConditionAssignment)
{ after(grammarAccess.getConditionAccess().getCompareConditionAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCompareCondition
entryRuleCompareCondition 
:
{ before(grammarAccess.getCompareConditionRule()); }
	 ruleCompareCondition
{ after(grammarAccess.getCompareConditionRule()); } 
	 EOF 
;

// Rule CompareCondition
ruleCompareCondition
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCompareConditionAccess().getGroup()); }
(rule__CompareCondition__Group__0)
{ after(grammarAccess.getCompareConditionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleConditionOperator
entryRuleConditionOperator 
:
{ before(grammarAccess.getConditionOperatorRule()); }
	 ruleConditionOperator
{ after(grammarAccess.getConditionOperatorRule()); } 
	 EOF 
;

// Rule ConditionOperator
ruleConditionOperator
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getConditionOperatorAccess().getAlternatives()); }
(rule__ConditionOperator__Alternatives)
{ after(grammarAccess.getConditionOperatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__AiocJ__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAiocJAccess().getAiocAssignment_0()); }
(rule__AiocJ__AiocAssignment_0)
{ after(grammarAccess.getAiocJAccess().getAiocAssignment_0()); }
)

    |(
{ before(grammarAccess.getAiocJAccess().getRuleSetAssignment_1()); }
(rule__AiocJ__RuleSetAssignment_1)*
{ after(grammarAccess.getAiocJAccess().getRuleSetAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__WhereExpressionBasicTerm__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhereExpressionBasicTermAccess().getGroup_0()); }
(rule__WhereExpressionBasicTerm__Group_0__0)
{ after(grammarAccess.getWhereExpressionBasicTermAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getWhereExpressionBasicTermAccess().getGroup_1()); }
(rule__WhereExpressionBasicTerm__Group_1__0)
{ after(grammarAccess.getWhereExpressionBasicTermAccess().getGroup_1()); }
)

    |(
{ before(grammarAccess.getWhereExpressionBasicTermAccess().getSVariableAssignment_2()); }
(rule__WhereExpressionBasicTerm__SVariableAssignment_2)
{ after(grammarAccess.getWhereExpressionBasicTermAccess().getSVariableAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__WhereCompareCondition__Alternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhereCompareConditionAccess().getGroup_0_0()); }
(rule__WhereCompareCondition__Group_0_0__0)
{ after(grammarAccess.getWhereCompareConditionAccess().getGroup_0_0()); }
)

    |(
{ before(grammarAccess.getWhereCompareConditionAccess().getTrueAssignment_0_1()); }
(rule__WhereCompareCondition__TrueAssignment_0_1)
{ after(grammarAccess.getWhereCompareConditionAccess().getTrueAssignment_0_1()); }
)

    |(
{ before(grammarAccess.getWhereCompareConditionAccess().getFalseAssignment_0_2()); }
(rule__WhereCompareCondition__FalseAssignment_0_2)
{ after(grammarAccess.getWhereCompareConditionAccess().getFalseAssignment_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__WhereLogicOp__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhereLogicOpAccess().getAndAssignment_0()); }
(rule__WhereLogicOp__AndAssignment_0)
{ after(grammarAccess.getWhereLogicOpAccess().getAndAssignment_0()); }
)

    |(
{ before(grammarAccess.getWhereLogicOpAccess().getOrAssignment_1()); }
(rule__WhereLogicOp__OrAssignment_1)
{ after(grammarAccess.getWhereLogicOpAccess().getOrAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SeqBlock__EventAlternatives_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSeqBlockAccess().getEventSkipParserRuleCall_0_0_0()); }
	ruleSkip
{ after(grammarAccess.getSeqBlockAccess().getEventSkipParserRuleCall_0_0_0()); }
)

    |(
{ before(grammarAccess.getSeqBlockAccess().getEventInteractionParserRuleCall_0_0_1()); }
	ruleInteraction
{ after(grammarAccess.getSeqBlockAccess().getEventInteractionParserRuleCall_0_0_1()); }
)

    |(
{ before(grammarAccess.getSeqBlockAccess().getEventLocalCodeParserRuleCall_0_0_2()); }
	ruleLocalCode
{ after(grammarAccess.getSeqBlockAccess().getEventLocalCodeParserRuleCall_0_0_2()); }
)

    |(
{ before(grammarAccess.getSeqBlockAccess().getEventIfThenElseParserRuleCall_0_0_3()); }
	ruleIfThenElse
{ after(grammarAccess.getSeqBlockAccess().getEventIfThenElseParserRuleCall_0_0_3()); }
)

    |(
{ before(grammarAccess.getSeqBlockAccess().getEventWhileParserRuleCall_0_0_4()); }
	ruleWhile
{ after(grammarAccess.getSeqBlockAccess().getEventWhileParserRuleCall_0_0_4()); }
)

    |(
{ before(grammarAccess.getSeqBlockAccess().getEventScopeParserRuleCall_0_0_5()); }
	ruleScope
{ after(grammarAccess.getSeqBlockAccess().getEventScopeParserRuleCall_0_0_5()); }
)

    |(
{ before(grammarAccess.getSeqBlockAccess().getEventNestedChoreographyParserRuleCall_0_0_6()); }
	ruleNestedChoreography
{ after(grammarAccess.getSeqBlockAccess().getEventNestedChoreographyParserRuleCall_0_0_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LocalCode__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocalCodeAccess().getGroup_0()); }
(rule__LocalCode__Group_0__0)
{ after(grammarAccess.getLocalCodeAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getLocalCodeAccess().getGroup_1()); }
(rule__LocalCode__Group_1__0)
{ after(grammarAccess.getLocalCodeAccess().getGroup_1()); }
)

    |(
{ before(grammarAccess.getLocalCodeAccess().getGroup_2()); }
(rule__LocalCode__Group_2__0)
{ after(grammarAccess.getLocalCodeAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SumExpressionTerm__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSumExpressionTermAccess().getGroup_0()); }
(rule__SumExpressionTerm__Group_0__0)
{ after(grammarAccess.getSumExpressionTermAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getSumExpressionTermAccess().getGroup_1()); }
(rule__SumExpressionTerm__Group_1__0)
{ after(grammarAccess.getSumExpressionTermAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionBasicTerm__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionBasicTermAccess().getVariableAssignment_0()); }
(rule__ExpressionBasicTerm__VariableAssignment_0)
{ after(grammarAccess.getExpressionBasicTermAccess().getVariableAssignment_0()); }
)

    |(
{ before(grammarAccess.getExpressionBasicTermAccess().getConstantAssignment_1()); }
(rule__ExpressionBasicTerm__ConstantAssignment_1)
{ after(grammarAccess.getExpressionBasicTermAccess().getConstantAssignment_1()); }
)

    |(
{ before(grammarAccess.getExpressionBasicTermAccess().getGroup_2()); }
(rule__ExpressionBasicTerm__Group_2__0)
{ after(grammarAccess.getExpressionBasicTermAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Constant__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantAccess().getIntValueAssignment_0()); }
(rule__Constant__IntValueAssignment_0)
{ after(grammarAccess.getConstantAccess().getIntValueAssignment_0()); }
)

    |(
{ before(grammarAccess.getConstantAccess().getStrValueAssignment_1()); }
(rule__Constant__StrValueAssignment_1)
{ after(grammarAccess.getConstantAccess().getStrValueAssignment_1()); }
)

    |(
{ before(grammarAccess.getConstantAccess().getTrueAssignment_2()); }
(rule__Constant__TrueAssignment_2)
{ after(grammarAccess.getConstantAccess().getTrueAssignment_2()); }
)

    |(
{ before(grammarAccess.getConstantAccess().getFalseAssignment_3()); }
(rule__Constant__FalseAssignment_3)
{ after(grammarAccess.getConstantAccess().getFalseAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CompareCondition__Alternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompareConditionAccess().getGroup_0_0()); }
(rule__CompareCondition__Group_0_0__0)
{ after(grammarAccess.getCompareConditionAccess().getGroup_0_0()); }
)

    |(
{ before(grammarAccess.getCompareConditionAccess().getTrueAssignment_0_1()); }
(rule__CompareCondition__TrueAssignment_0_1)
{ after(grammarAccess.getCompareConditionAccess().getTrueAssignment_0_1()); }
)

    |(
{ before(grammarAccess.getCompareConditionAccess().getFalseAssignment_0_2()); }
(rule__CompareCondition__FalseAssignment_0_2)
{ after(grammarAccess.getCompareConditionAccess().getFalseAssignment_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CompareCondition__Alternatives_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompareConditionAccess().getAndAssignment_1_0_0()); }
(rule__CompareCondition__AndAssignment_1_0_0)
{ after(grammarAccess.getCompareConditionAccess().getAndAssignment_1_0_0()); }
)

    |(
{ before(grammarAccess.getCompareConditionAccess().getOrAssignment_1_0_1()); }
(rule__CompareCondition__OrAssignment_1_0_1)
{ after(grammarAccess.getCompareConditionAccess().getOrAssignment_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionOperator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionOperatorAccess().getLessAssignment_0()); }
(rule__ConditionOperator__LessAssignment_0)
{ after(grammarAccess.getConditionOperatorAccess().getLessAssignment_0()); }
)

    |(
{ before(grammarAccess.getConditionOperatorAccess().getEqualAssignment_1()); }
(rule__ConditionOperator__EqualAssignment_1)
{ after(grammarAccess.getConditionOperatorAccess().getEqualAssignment_1()); }
)

    |(
{ before(grammarAccess.getConditionOperatorAccess().getGreaterAssignment_2()); }
(rule__ConditionOperator__GreaterAssignment_2)
{ after(grammarAccess.getConditionOperatorAccess().getGreaterAssignment_2()); }
)

    |(
{ before(grammarAccess.getConditionOperatorAccess().getNot_equalAssignment_3()); }
(rule__ConditionOperator__Not_equalAssignment_3)
{ after(grammarAccess.getConditionOperatorAccess().getNot_equalAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Aioc__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Aioc__Group__0__Impl
	rule__Aioc__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Aioc__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAiocAccess().getPreambleKeyword_0()); }

	'preamble' 

{ after(grammarAccess.getAiocAccess().getPreambleKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Aioc__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Aioc__Group__1__Impl
	rule__Aioc__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Aioc__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAiocAccess().getLCURLYTerminalRuleCall_1()); }
	RULE_LCURLY
{ after(grammarAccess.getAiocAccess().getLCURLYTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Aioc__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Aioc__Group__2__Impl
	rule__Aioc__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Aioc__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAiocAccess().getPreambleAssignment_2()); }
(rule__Aioc__PreambleAssignment_2)
{ after(grammarAccess.getAiocAccess().getPreambleAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Aioc__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Aioc__Group__3__Impl
	rule__Aioc__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Aioc__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAiocAccess().getRCURLYTerminalRuleCall_3()); }
	RULE_RCURLY
{ after(grammarAccess.getAiocAccess().getRCURLYTerminalRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Aioc__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Aioc__Group__4__Impl
	rule__Aioc__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Aioc__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAiocAccess().getAiocKeyword_4()); }

	'aioc' 

{ after(grammarAccess.getAiocAccess().getAiocKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Aioc__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Aioc__Group__5__Impl
	rule__Aioc__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Aioc__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAiocAccess().getLCURLYTerminalRuleCall_5()); }
	RULE_LCURLY
{ after(grammarAccess.getAiocAccess().getLCURLYTerminalRuleCall_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Aioc__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Aioc__Group__6__Impl
	rule__Aioc__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Aioc__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAiocAccess().getChoreographyAssignment_6()); }
(rule__Aioc__ChoreographyAssignment_6)
{ after(grammarAccess.getAiocAccess().getChoreographyAssignment_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Aioc__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Aioc__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Aioc__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAiocAccess().getRCURLYTerminalRuleCall_7()); }
	RULE_RCURLY
{ after(grammarAccess.getAiocAccess().getRCURLYTerminalRuleCall_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


















rule__Rule__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Rule__Group__0__Impl
	rule__Rule__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleAccess().getRuleKeyword_0()); }

	'rule' 

{ after(grammarAccess.getRuleAccess().getRuleKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Rule__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Rule__Group__1__Impl
	rule__Rule__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleAccess().getLCURLYTerminalRuleCall_1()); }
	RULE_LCURLY
{ after(grammarAccess.getRuleAccess().getLCURLYTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Rule__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Rule__Group__2__Impl
	rule__Rule__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleAccess().getOnKeyword_2()); }

	'on' 

{ after(grammarAccess.getRuleAccess().getOnKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Rule__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Rule__Group__3__Impl
	rule__Rule__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleAccess().getLCURLYTerminalRuleCall_3()); }
	RULE_LCURLY
{ after(grammarAccess.getRuleAccess().getLCURLYTerminalRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Rule__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Rule__Group__4__Impl
	rule__Rule__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleAccess().getWhereAssignment_4()); }
(rule__Rule__WhereAssignment_4)
{ after(grammarAccess.getRuleAccess().getWhereAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Rule__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Rule__Group__5__Impl
	rule__Rule__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleAccess().getRCURLYTerminalRuleCall_5()); }
	RULE_RCURLY
{ after(grammarAccess.getRuleAccess().getRCURLYTerminalRuleCall_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Rule__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Rule__Group__6__Impl
	rule__Rule__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleAccess().getDoKeyword_6()); }

	'do' 

{ after(grammarAccess.getRuleAccess().getDoKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Rule__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Rule__Group__7__Impl
	rule__Rule__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleAccess().getLCURLYTerminalRuleCall_7()); }
	RULE_LCURLY
{ after(grammarAccess.getRuleAccess().getLCURLYTerminalRuleCall_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Rule__Group__8
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Rule__Group__8__Impl
	rule__Rule__Group__9
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__8__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleAccess().getChoreographyAssignment_8()); }
(rule__Rule__ChoreographyAssignment_8)
{ after(grammarAccess.getRuleAccess().getChoreographyAssignment_8()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Rule__Group__9
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Rule__Group__9__Impl
	rule__Rule__Group__10
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__9__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleAccess().getRCURLYTerminalRuleCall_9()); }
	RULE_RCURLY
{ after(grammarAccess.getRuleAccess().getRCURLYTerminalRuleCall_9()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Rule__Group__10
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Rule__Group__10__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__10__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleAccess().getRCURLYTerminalRuleCall_10()); }
	RULE_RCURLY
{ after(grammarAccess.getRuleAccess().getRCURLYTerminalRuleCall_10()); }
)

;
finally {
	restoreStackSize(stackSize);
}
























rule__WhereExpressionBasicTerm__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WhereExpressionBasicTerm__Group_0__0__Impl
	rule__WhereExpressionBasicTerm__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__WhereExpressionBasicTerm__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhereExpressionBasicTermAccess().getNKeyword_0_0()); }

	'N.' 

{ after(grammarAccess.getWhereExpressionBasicTermAccess().getNKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__WhereExpressionBasicTerm__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WhereExpressionBasicTerm__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__WhereExpressionBasicTerm__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhereExpressionBasicTermAccess().getNVariableAssignment_0_1()); }
(rule__WhereExpressionBasicTerm__NVariableAssignment_0_1)
{ after(grammarAccess.getWhereExpressionBasicTermAccess().getNVariableAssignment_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__WhereExpressionBasicTerm__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WhereExpressionBasicTerm__Group_1__0__Impl
	rule__WhereExpressionBasicTerm__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__WhereExpressionBasicTerm__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhereExpressionBasicTermAccess().getEKeyword_1_0()); }

	'E.' 

{ after(grammarAccess.getWhereExpressionBasicTermAccess().getEKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__WhereExpressionBasicTerm__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WhereExpressionBasicTerm__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__WhereExpressionBasicTerm__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhereExpressionBasicTermAccess().getEVariableAssignment_1_1()); }
(rule__WhereExpressionBasicTerm__EVariableAssignment_1_1)
{ after(grammarAccess.getWhereExpressionBasicTermAccess().getEVariableAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__WhereCompareCondition__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WhereCompareCondition__Group__0__Impl
	rule__WhereCompareCondition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__WhereCompareCondition__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhereCompareConditionAccess().getAlternatives_0()); }
(rule__WhereCompareCondition__Alternatives_0)
{ after(grammarAccess.getWhereCompareConditionAccess().getAlternatives_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__WhereCompareCondition__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WhereCompareCondition__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__WhereCompareCondition__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhereCompareConditionAccess().getGroup_1()); }
(rule__WhereCompareCondition__Group_1__0)?
{ after(grammarAccess.getWhereCompareConditionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__WhereCompareCondition__Group_0_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WhereCompareCondition__Group_0_0__0__Impl
	rule__WhereCompareCondition__Group_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__WhereCompareCondition__Group_0_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhereCompareConditionAccess().getLeftExpressionAssignment_0_0_0()); }
(rule__WhereCompareCondition__LeftExpressionAssignment_0_0_0)
{ after(grammarAccess.getWhereCompareConditionAccess().getLeftExpressionAssignment_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__WhereCompareCondition__Group_0_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WhereCompareCondition__Group_0_0__1__Impl
	rule__WhereCompareCondition__Group_0_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__WhereCompareCondition__Group_0_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhereCompareConditionAccess().getOperatorAssignment_0_0_1()); }
(rule__WhereCompareCondition__OperatorAssignment_0_0_1)
{ after(grammarAccess.getWhereCompareConditionAccess().getOperatorAssignment_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__WhereCompareCondition__Group_0_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WhereCompareCondition__Group_0_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__WhereCompareCondition__Group_0_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhereCompareConditionAccess().getRightExpressionAssignment_0_0_2()); }
(rule__WhereCompareCondition__RightExpressionAssignment_0_0_2)
{ after(grammarAccess.getWhereCompareConditionAccess().getRightExpressionAssignment_0_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__WhereCompareCondition__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WhereCompareCondition__Group_1__0__Impl
	rule__WhereCompareCondition__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__WhereCompareCondition__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhereCompareConditionAccess().getLogicOpAssignment_1_0()); }
(rule__WhereCompareCondition__LogicOpAssignment_1_0)
{ after(grammarAccess.getWhereCompareConditionAccess().getLogicOpAssignment_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__WhereCompareCondition__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WhereCompareCondition__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__WhereCompareCondition__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhereCompareConditionAccess().getContinuationAssignment_1_1()); }
(rule__WhereCompareCondition__ContinuationAssignment_1_1)
{ after(grammarAccess.getWhereCompareConditionAccess().getContinuationAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Preamble__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Preamble__Group__0__Impl
	rule__Preamble__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Preamble__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPreambleAccess().getStarterKeyword_0()); }

	'starter:' 

{ after(grammarAccess.getPreambleAccess().getStarterKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Preamble__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Preamble__Group__1__Impl
	rule__Preamble__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Preamble__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPreambleAccess().getStarterAssignment_1()); }
(rule__Preamble__StarterAssignment_1)
{ after(grammarAccess.getPreambleAccess().getStarterAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Preamble__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Preamble__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Preamble__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPreambleAccess().getLocDefinitionAssignment_2()); }
(rule__Preamble__LocDefinitionAssignment_2)?
{ after(grammarAccess.getPreambleAccess().getLocDefinitionAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__LocationDefinition__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LocationDefinition__Group__0__Impl
	rule__LocationDefinition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LocationDefinition__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocationDefinitionAccess().getLocationKeyword_0()); }

	'location' 

{ after(grammarAccess.getLocationDefinitionAccess().getLocationKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LocationDefinition__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LocationDefinition__Group__1__Impl
	rule__LocationDefinition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LocationDefinition__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocationDefinitionAccess().getATTerminalRuleCall_1()); }
	RULE_AT
{ after(grammarAccess.getLocationDefinitionAccess().getATTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LocationDefinition__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LocationDefinition__Group__2__Impl
	rule__LocationDefinition__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__LocationDefinition__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocationDefinitionAccess().getRoleAssignment_2()); }
(rule__LocationDefinition__RoleAssignment_2)
{ after(grammarAccess.getLocationDefinitionAccess().getRoleAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LocationDefinition__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LocationDefinition__Group__3__Impl
	rule__LocationDefinition__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__LocationDefinition__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocationDefinitionAccess().getCOLONTerminalRuleCall_3()); }
	RULE_COLON
{ after(grammarAccess.getLocationDefinitionAccess().getCOLONTerminalRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LocationDefinition__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LocationDefinition__Group__4__Impl
	rule__LocationDefinition__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__LocationDefinition__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocationDefinitionAccess().getLocationAssignment_4()); }
(rule__LocationDefinition__LocationAssignment_4)
{ after(grammarAccess.getLocationDefinitionAccess().getLocationAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LocationDefinition__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LocationDefinition__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LocationDefinition__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocationDefinitionAccess().getContinuationAssignment_5()); }
(rule__LocationDefinition__ContinuationAssignment_5)?
{ after(grammarAccess.getLocationDefinitionAccess().getContinuationAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__Choreography__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Choreography__Group__0__Impl
	rule__Choreography__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Choreography__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getChoreographyAccess().getSeqBlockAssignment_0()); }
(rule__Choreography__SeqBlockAssignment_0)
{ after(grammarAccess.getChoreographyAccess().getSeqBlockAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Choreography__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Choreography__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Choreography__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getChoreographyAccess().getGroup_1()); }
(rule__Choreography__Group_1__0)?
{ after(grammarAccess.getChoreographyAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Choreography__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Choreography__Group_1__0__Impl
	rule__Choreography__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Choreography__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getChoreographyAccess().getPIPETerminalRuleCall_1_0()); }
	RULE_PIPE
{ after(grammarAccess.getChoreographyAccess().getPIPETerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Choreography__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Choreography__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Choreography__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getChoreographyAccess().getNextAssignment_1_1()); }
(rule__Choreography__NextAssignment_1_1)
{ after(grammarAccess.getChoreographyAccess().getNextAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SeqBlock__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SeqBlock__Group__0__Impl
	rule__SeqBlock__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SeqBlock__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSeqBlockAccess().getEventAssignment_0()); }
(rule__SeqBlock__EventAssignment_0)
{ after(grammarAccess.getSeqBlockAccess().getEventAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SeqBlock__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SeqBlock__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SeqBlock__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSeqBlockAccess().getGroup_1()); }
(rule__SeqBlock__Group_1__0)?
{ after(grammarAccess.getSeqBlockAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SeqBlock__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SeqBlock__Group_1__0__Impl
	rule__SeqBlock__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SeqBlock__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSeqBlockAccess().getSEMICOLONTerminalRuleCall_1_0()); }
	RULE_SEMICOLON
{ after(grammarAccess.getSeqBlockAccess().getSEMICOLONTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SeqBlock__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SeqBlock__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SeqBlock__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSeqBlockAccess().getNextAssignment_1_1()); }
(rule__SeqBlock__NextAssignment_1_1)
{ after(grammarAccess.getSeqBlockAccess().getNextAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Interaction__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Interaction__Group__0__Impl
	rule__Interaction__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Interaction__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInteractionAccess().getOperationAssignment_0()); }
(rule__Interaction__OperationAssignment_0)
{ after(grammarAccess.getInteractionAccess().getOperationAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Interaction__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Interaction__Group__1__Impl
	rule__Interaction__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Interaction__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInteractionAccess().getCOLONTerminalRuleCall_1()); }
	RULE_COLON
{ after(grammarAccess.getInteractionAccess().getCOLONTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Interaction__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Interaction__Group__2__Impl
	rule__Interaction__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Interaction__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInteractionAccess().getSenderAssignment_2()); }
(rule__Interaction__SenderAssignment_2)
{ after(grammarAccess.getInteractionAccess().getSenderAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Interaction__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Interaction__Group__3__Impl
	rule__Interaction__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Interaction__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInteractionAccess().getLPARENTerminalRuleCall_3()); }
	RULE_LPAREN
{ after(grammarAccess.getInteractionAccess().getLPARENTerminalRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Interaction__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Interaction__Group__4__Impl
	rule__Interaction__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Interaction__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInteractionAccess().getSenderExpressionAssignment_4()); }
(rule__Interaction__SenderExpressionAssignment_4)?
{ after(grammarAccess.getInteractionAccess().getSenderExpressionAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Interaction__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Interaction__Group__5__Impl
	rule__Interaction__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Interaction__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInteractionAccess().getRPARENTerminalRuleCall_5()); }
	RULE_RPAREN
{ after(grammarAccess.getInteractionAccess().getRPARENTerminalRuleCall_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Interaction__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Interaction__Group__6__Impl
	rule__Interaction__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Interaction__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInteractionAccess().getARROWTerminalRuleCall_6()); }
	RULE_ARROW
{ after(grammarAccess.getInteractionAccess().getARROWTerminalRuleCall_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Interaction__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Interaction__Group__7__Impl
	rule__Interaction__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__Interaction__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInteractionAccess().getReceiverAssignment_7()); }
(rule__Interaction__ReceiverAssignment_7)
{ after(grammarAccess.getInteractionAccess().getReceiverAssignment_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Interaction__Group__8
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Interaction__Group__8__Impl
	rule__Interaction__Group__9
;
finally {
	restoreStackSize(stackSize);
}

rule__Interaction__Group__8__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInteractionAccess().getLPARENTerminalRuleCall_8()); }
	RULE_LPAREN
{ after(grammarAccess.getInteractionAccess().getLPARENTerminalRuleCall_8()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Interaction__Group__9
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Interaction__Group__9__Impl
	rule__Interaction__Group__10
;
finally {
	restoreStackSize(stackSize);
}

rule__Interaction__Group__9__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInteractionAccess().getReceiverVariableAssignment_9()); }
(rule__Interaction__ReceiverVariableAssignment_9)?
{ after(grammarAccess.getInteractionAccess().getReceiverVariableAssignment_9()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Interaction__Group__10
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Interaction__Group__10__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Interaction__Group__10__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInteractionAccess().getRPARENTerminalRuleCall_10()); }
	RULE_RPAREN
{ after(grammarAccess.getInteractionAccess().getRPARENTerminalRuleCall_10()); }
)

;
finally {
	restoreStackSize(stackSize);
}
























rule__LocalCode__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LocalCode__Group_0__0__Impl
	rule__LocalCode__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LocalCode__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocalCodeAccess().getLocalAskCommandAction_0_0()); }
(

)
{ after(grammarAccess.getLocalCodeAccess().getLocalAskCommandAction_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LocalCode__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LocalCode__Group_0__1__Impl
	rule__LocalCode__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LocalCode__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocalCodeAccess().getResultVariableAssignment_0_1()); }
(rule__LocalCode__ResultVariableAssignment_0_1)
{ after(grammarAccess.getLocalCodeAccess().getResultVariableAssignment_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LocalCode__Group_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LocalCode__Group_0__2__Impl
	rule__LocalCode__Group_0__3
;
finally {
	restoreStackSize(stackSize);
}

rule__LocalCode__Group_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocalCodeAccess().getATTerminalRuleCall_0_2()); }
	RULE_AT
{ after(grammarAccess.getLocalCodeAccess().getATTerminalRuleCall_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LocalCode__Group_0__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LocalCode__Group_0__3__Impl
	rule__LocalCode__Group_0__4
;
finally {
	restoreStackSize(stackSize);
}

rule__LocalCode__Group_0__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocalCodeAccess().getThreadAssignment_0_3()); }
(rule__LocalCode__ThreadAssignment_0_3)
{ after(grammarAccess.getLocalCodeAccess().getThreadAssignment_0_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LocalCode__Group_0__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LocalCode__Group_0__4__Impl
	rule__LocalCode__Group_0__5
;
finally {
	restoreStackSize(stackSize);
}

rule__LocalCode__Group_0__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocalCodeAccess().getASSIGNTerminalRuleCall_0_4()); }
	RULE_ASSIGN
{ after(grammarAccess.getLocalCodeAccess().getASSIGNTerminalRuleCall_0_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LocalCode__Group_0__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LocalCode__Group_0__5__Impl
	rule__LocalCode__Group_0__6
;
finally {
	restoreStackSize(stackSize);
}

rule__LocalCode__Group_0__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocalCodeAccess().getGetInputKeyword_0_5()); }

	'getInput' 

{ after(grammarAccess.getLocalCodeAccess().getGetInputKeyword_0_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LocalCode__Group_0__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LocalCode__Group_0__6__Impl
	rule__LocalCode__Group_0__7
;
finally {
	restoreStackSize(stackSize);
}

rule__LocalCode__Group_0__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocalCodeAccess().getLPARENTerminalRuleCall_0_6()); }
	RULE_LPAREN
{ after(grammarAccess.getLocalCodeAccess().getLPARENTerminalRuleCall_0_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LocalCode__Group_0__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LocalCode__Group_0__7__Impl
	rule__LocalCode__Group_0__8
;
finally {
	restoreStackSize(stackSize);
}

rule__LocalCode__Group_0__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocalCodeAccess().getQuestionAssignment_0_7()); }
(rule__LocalCode__QuestionAssignment_0_7)
{ after(grammarAccess.getLocalCodeAccess().getQuestionAssignment_0_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LocalCode__Group_0__8
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LocalCode__Group_0__8__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LocalCode__Group_0__8__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocalCodeAccess().getRPARENTerminalRuleCall_0_8()); }
	RULE_RPAREN
{ after(grammarAccess.getLocalCodeAccess().getRPARENTerminalRuleCall_0_8()); }
)

;
finally {
	restoreStackSize(stackSize);
}




















rule__LocalCode__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LocalCode__Group_1__0__Impl
	rule__LocalCode__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LocalCode__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocalCodeAccess().getLocalShowCommandAction_1_0()); }
(

)
{ after(grammarAccess.getLocalCodeAccess().getLocalShowCommandAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LocalCode__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LocalCode__Group_1__1__Impl
	rule__LocalCode__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LocalCode__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocalCodeAccess().getVariableAssignment_1_1()); }
(rule__LocalCode__VariableAssignment_1_1)
{ after(grammarAccess.getLocalCodeAccess().getVariableAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LocalCode__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LocalCode__Group_1__2__Impl
	rule__LocalCode__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__LocalCode__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocalCodeAccess().getATTerminalRuleCall_1_2()); }
	RULE_AT
{ after(grammarAccess.getLocalCodeAccess().getATTerminalRuleCall_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LocalCode__Group_1__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LocalCode__Group_1__3__Impl
	rule__LocalCode__Group_1__4
;
finally {
	restoreStackSize(stackSize);
}

rule__LocalCode__Group_1__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocalCodeAccess().getThreadAssignment_1_3()); }
(rule__LocalCode__ThreadAssignment_1_3)
{ after(grammarAccess.getLocalCodeAccess().getThreadAssignment_1_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LocalCode__Group_1__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LocalCode__Group_1__4__Impl
	rule__LocalCode__Group_1__5
;
finally {
	restoreStackSize(stackSize);
}

rule__LocalCode__Group_1__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocalCodeAccess().getASSIGNTerminalRuleCall_1_4()); }
	RULE_ASSIGN
{ after(grammarAccess.getLocalCodeAccess().getASSIGNTerminalRuleCall_1_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LocalCode__Group_1__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LocalCode__Group_1__5__Impl
	rule__LocalCode__Group_1__6
;
finally {
	restoreStackSize(stackSize);
}

rule__LocalCode__Group_1__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocalCodeAccess().getShowKeyword_1_5()); }

	'show' 

{ after(grammarAccess.getLocalCodeAccess().getShowKeyword_1_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LocalCode__Group_1__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LocalCode__Group_1__6__Impl
	rule__LocalCode__Group_1__7
;
finally {
	restoreStackSize(stackSize);
}

rule__LocalCode__Group_1__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocalCodeAccess().getLPARENTerminalRuleCall_1_6()); }
	RULE_LPAREN
{ after(grammarAccess.getLocalCodeAccess().getLPARENTerminalRuleCall_1_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LocalCode__Group_1__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LocalCode__Group_1__7__Impl
	rule__LocalCode__Group_1__8
;
finally {
	restoreStackSize(stackSize);
}

rule__LocalCode__Group_1__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocalCodeAccess().getExpressionAssignment_1_7()); }
(rule__LocalCode__ExpressionAssignment_1_7)
{ after(grammarAccess.getLocalCodeAccess().getExpressionAssignment_1_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LocalCode__Group_1__8
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LocalCode__Group_1__8__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LocalCode__Group_1__8__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocalCodeAccess().getRPARENTerminalRuleCall_1_8()); }
	RULE_RPAREN
{ after(grammarAccess.getLocalCodeAccess().getRPARENTerminalRuleCall_1_8()); }
)

;
finally {
	restoreStackSize(stackSize);
}




















rule__LocalCode__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LocalCode__Group_2__0__Impl
	rule__LocalCode__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LocalCode__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocalCodeAccess().getLocalAssignmentCommandAction_2_0()); }
(

)
{ after(grammarAccess.getLocalCodeAccess().getLocalAssignmentCommandAction_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LocalCode__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LocalCode__Group_2__1__Impl
	rule__LocalCode__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LocalCode__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocalCodeAccess().getVariableAssignment_2_1()); }
(rule__LocalCode__VariableAssignment_2_1)
{ after(grammarAccess.getLocalCodeAccess().getVariableAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LocalCode__Group_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LocalCode__Group_2__2__Impl
	rule__LocalCode__Group_2__3
;
finally {
	restoreStackSize(stackSize);
}

rule__LocalCode__Group_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocalCodeAccess().getATTerminalRuleCall_2_2()); }
	RULE_AT
{ after(grammarAccess.getLocalCodeAccess().getATTerminalRuleCall_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LocalCode__Group_2__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LocalCode__Group_2__3__Impl
	rule__LocalCode__Group_2__4
;
finally {
	restoreStackSize(stackSize);
}

rule__LocalCode__Group_2__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocalCodeAccess().getThreadAssignment_2_3()); }
(rule__LocalCode__ThreadAssignment_2_3)
{ after(grammarAccess.getLocalCodeAccess().getThreadAssignment_2_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LocalCode__Group_2__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LocalCode__Group_2__4__Impl
	rule__LocalCode__Group_2__5
;
finally {
	restoreStackSize(stackSize);
}

rule__LocalCode__Group_2__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocalCodeAccess().getASSIGNTerminalRuleCall_2_4()); }
	RULE_ASSIGN
{ after(grammarAccess.getLocalCodeAccess().getASSIGNTerminalRuleCall_2_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LocalCode__Group_2__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LocalCode__Group_2__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LocalCode__Group_2__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocalCodeAccess().getExpressionAssignment_2_5()); }
(rule__LocalCode__ExpressionAssignment_2_5)
{ after(grammarAccess.getLocalCodeAccess().getExpressionAssignment_2_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__IfThenElse__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfThenElse__Group__0__Impl
	rule__IfThenElse__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IfThenElse__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfThenElseAccess().getGroup_0()); }
(rule__IfThenElse__Group_0__0)?
{ after(grammarAccess.getIfThenElseAccess().getGroup_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfThenElse__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfThenElse__Group__1__Impl
	rule__IfThenElse__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IfThenElse__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfThenElseAccess().getIfKeyword_1()); }

	'if' 

{ after(grammarAccess.getIfThenElseAccess().getIfKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfThenElse__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfThenElse__Group__2__Impl
	rule__IfThenElse__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__IfThenElse__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfThenElseAccess().getLPARENTerminalRuleCall_2()); }
	RULE_LPAREN
{ after(grammarAccess.getIfThenElseAccess().getLPARENTerminalRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfThenElse__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfThenElse__Group__3__Impl
	rule__IfThenElse__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__IfThenElse__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfThenElseAccess().getConditionAssignment_3()); }
(rule__IfThenElse__ConditionAssignment_3)
{ after(grammarAccess.getIfThenElseAccess().getConditionAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfThenElse__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfThenElse__Group__4__Impl
	rule__IfThenElse__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__IfThenElse__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfThenElseAccess().getRPARENTerminalRuleCall_4()); }
	RULE_RPAREN
{ after(grammarAccess.getIfThenElseAccess().getRPARENTerminalRuleCall_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfThenElse__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfThenElse__Group__5__Impl
	rule__IfThenElse__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__IfThenElse__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfThenElseAccess().getATTerminalRuleCall_5()); }
	RULE_AT
{ after(grammarAccess.getIfThenElseAccess().getATTerminalRuleCall_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfThenElse__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfThenElse__Group__6__Impl
	rule__IfThenElse__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__IfThenElse__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfThenElseAccess().getThreadAssignment_6()); }
(rule__IfThenElse__ThreadAssignment_6)
{ after(grammarAccess.getIfThenElseAccess().getThreadAssignment_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfThenElse__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfThenElse__Group__7__Impl
	rule__IfThenElse__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__IfThenElse__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfThenElseAccess().getLCURLYTerminalRuleCall_7()); }
	RULE_LCURLY
{ after(grammarAccess.getIfThenElseAccess().getLCURLYTerminalRuleCall_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfThenElse__Group__8
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfThenElse__Group__8__Impl
	rule__IfThenElse__Group__9
;
finally {
	restoreStackSize(stackSize);
}

rule__IfThenElse__Group__8__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfThenElseAccess().getThenAssignment_8()); }
(rule__IfThenElse__ThenAssignment_8)
{ after(grammarAccess.getIfThenElseAccess().getThenAssignment_8()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfThenElse__Group__9
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfThenElse__Group__9__Impl
	rule__IfThenElse__Group__10
;
finally {
	restoreStackSize(stackSize);
}

rule__IfThenElse__Group__9__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfThenElseAccess().getRCURLYTerminalRuleCall_9()); }
	RULE_RCURLY
{ after(grammarAccess.getIfThenElseAccess().getRCURLYTerminalRuleCall_9()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfThenElse__Group__10
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfThenElse__Group__10__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IfThenElse__Group__10__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfThenElseAccess().getGroup_10()); }
(rule__IfThenElse__Group_10__0)?
{ after(grammarAccess.getIfThenElseAccess().getGroup_10()); }
)

;
finally {
	restoreStackSize(stackSize);
}
























rule__IfThenElse__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfThenElse__Group_0__0__Impl
	rule__IfThenElse__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IfThenElse__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfThenElseAccess().getKeyAssignment_0_0()); }
(rule__IfThenElse__KeyAssignment_0_0)
{ after(grammarAccess.getIfThenElseAccess().getKeyAssignment_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfThenElse__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfThenElse__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IfThenElse__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfThenElseAccess().getCOLONTerminalRuleCall_0_1()); }
	RULE_COLON
{ after(grammarAccess.getIfThenElseAccess().getCOLONTerminalRuleCall_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__IfThenElse__Group_10__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfThenElse__Group_10__0__Impl
	rule__IfThenElse__Group_10__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IfThenElse__Group_10__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfThenElseAccess().getElseKeyword_10_0()); }

	'else' 

{ after(grammarAccess.getIfThenElseAccess().getElseKeyword_10_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfThenElse__Group_10__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfThenElse__Group_10__1__Impl
	rule__IfThenElse__Group_10__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IfThenElse__Group_10__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfThenElseAccess().getLCURLYTerminalRuleCall_10_1()); }
	RULE_LCURLY
{ after(grammarAccess.getIfThenElseAccess().getLCURLYTerminalRuleCall_10_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfThenElse__Group_10__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfThenElse__Group_10__2__Impl
	rule__IfThenElse__Group_10__3
;
finally {
	restoreStackSize(stackSize);
}

rule__IfThenElse__Group_10__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfThenElseAccess().getElseAssignment_10_2()); }
(rule__IfThenElse__ElseAssignment_10_2)
{ after(grammarAccess.getIfThenElseAccess().getElseAssignment_10_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfThenElse__Group_10__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfThenElse__Group_10__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IfThenElse__Group_10__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfThenElseAccess().getRCURLYTerminalRuleCall_10_3()); }
	RULE_RCURLY
{ after(grammarAccess.getIfThenElseAccess().getRCURLYTerminalRuleCall_10_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__While__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__While__Group__0__Impl
	rule__While__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileAccess().getWhileKeyword_0()); }

	'while' 

{ after(grammarAccess.getWhileAccess().getWhileKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__While__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__While__Group__1__Impl
	rule__While__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileAccess().getLPARENTerminalRuleCall_1()); }
	RULE_LPAREN
{ after(grammarAccess.getWhileAccess().getLPARENTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__While__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__While__Group__2__Impl
	rule__While__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileAccess().getConditionAssignment_2()); }
(rule__While__ConditionAssignment_2)
{ after(grammarAccess.getWhileAccess().getConditionAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__While__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__While__Group__3__Impl
	rule__While__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileAccess().getRPARENTerminalRuleCall_3()); }
	RULE_RPAREN
{ after(grammarAccess.getWhileAccess().getRPARENTerminalRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__While__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__While__Group__4__Impl
	rule__While__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileAccess().getATTerminalRuleCall_4()); }
	RULE_AT
{ after(grammarAccess.getWhileAccess().getATTerminalRuleCall_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__While__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__While__Group__5__Impl
	rule__While__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileAccess().getThreadAssignment_5()); }
(rule__While__ThreadAssignment_5)
{ after(grammarAccess.getWhileAccess().getThreadAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__While__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__While__Group__6__Impl
	rule__While__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileAccess().getLCURLYTerminalRuleCall_6()); }
	RULE_LCURLY
{ after(grammarAccess.getWhileAccess().getLCURLYTerminalRuleCall_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__While__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__While__Group__7__Impl
	rule__While__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileAccess().getChoreographyAssignment_7()); }
(rule__While__ChoreographyAssignment_7)
{ after(grammarAccess.getWhileAccess().getChoreographyAssignment_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__While__Group__8
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__While__Group__8__Impl
	rule__While__Group__9
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__8__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileAccess().getRCURLYTerminalRuleCall_8()); }
	RULE_RCURLY
{ after(grammarAccess.getWhileAccess().getRCURLYTerminalRuleCall_8()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__While__Group__9
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__While__Group__9__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__9__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileAccess().getGroup_9()); }
(rule__While__Group_9__0)?
{ after(grammarAccess.getWhileAccess().getGroup_9()); }
)

;
finally {
	restoreStackSize(stackSize);
}






















rule__While__Group_9__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__While__Group_9__0__Impl
	rule__While__Group_9__1
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group_9__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileAccess().getLCURLYTerminalRuleCall_9_0()); }
	RULE_LCURLY
{ after(grammarAccess.getWhileAccess().getLCURLYTerminalRuleCall_9_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__While__Group_9__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__While__Group_9__1__Impl
	rule__While__Group_9__2
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group_9__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileAccess().getKeyAssignment_9_1()); }
(rule__While__KeyAssignment_9_1)
{ after(grammarAccess.getWhileAccess().getKeyAssignment_9_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__While__Group_9__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__While__Group_9__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group_9__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileAccess().getRCURLYTerminalRuleCall_9_2()); }
	RULE_RCURLY
{ after(grammarAccess.getWhileAccess().getRCURLYTerminalRuleCall_9_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Scope__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Scope__Group__0__Impl
	rule__Scope__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Scope__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScopeAccess().getScopeKeyword_0()); }

	'scope' 

{ after(grammarAccess.getScopeAccess().getScopeKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Scope__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Scope__Group__1__Impl
	rule__Scope__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Scope__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScopeAccess().getATTerminalRuleCall_1()); }
	RULE_AT
{ after(grammarAccess.getScopeAccess().getATTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Scope__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Scope__Group__2__Impl
	rule__Scope__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Scope__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScopeAccess().getThreadAssignment_2()); }
(rule__Scope__ThreadAssignment_2)
{ after(grammarAccess.getScopeAccess().getThreadAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Scope__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Scope__Group__3__Impl
	rule__Scope__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Scope__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScopeAccess().getLCURLYTerminalRuleCall_3()); }
	RULE_LCURLY
{ after(grammarAccess.getScopeAccess().getLCURLYTerminalRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Scope__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Scope__Group__4__Impl
	rule__Scope__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Scope__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScopeAccess().getChoreographyAssignment_4()); }
(rule__Scope__ChoreographyAssignment_4)
{ after(grammarAccess.getScopeAccess().getChoreographyAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Scope__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Scope__Group__5__Impl
	rule__Scope__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Scope__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScopeAccess().getRCURLYTerminalRuleCall_5()); }
	RULE_RCURLY
{ after(grammarAccess.getScopeAccess().getRCURLYTerminalRuleCall_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Scope__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Scope__Group__6__Impl
	rule__Scope__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Scope__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScopeAccess().getGroup_6()); }
(rule__Scope__Group_6__0)?
{ after(grammarAccess.getScopeAccess().getGroup_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Scope__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Scope__Group__7__Impl
	rule__Scope__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__Scope__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScopeAccess().getGroup_7()); }
(rule__Scope__Group_7__0)?
{ after(grammarAccess.getScopeAccess().getGroup_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Scope__Group__8
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Scope__Group__8__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Scope__Group__8__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScopeAccess().getGroup_8()); }
(rule__Scope__Group_8__0)?
{ after(grammarAccess.getScopeAccess().getGroup_8()); }
)

;
finally {
	restoreStackSize(stackSize);
}




















rule__Scope__Group_6__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Scope__Group_6__0__Impl
	rule__Scope__Group_6__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Scope__Group_6__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScopeAccess().getPropKeyword_6_0()); }

	'prop' 

{ after(grammarAccess.getScopeAccess().getPropKeyword_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Scope__Group_6__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Scope__Group_6__1__Impl
	rule__Scope__Group_6__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Scope__Group_6__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScopeAccess().getLCURLYTerminalRuleCall_6_1()); }
	RULE_LCURLY
{ after(grammarAccess.getScopeAccess().getLCURLYTerminalRuleCall_6_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Scope__Group_6__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Scope__Group_6__2__Impl
	rule__Scope__Group_6__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Scope__Group_6__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScopeAccess().getPropertiesAssignment_6_2()); }
(rule__Scope__PropertiesAssignment_6_2)
{ after(grammarAccess.getScopeAccess().getPropertiesAssignment_6_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Scope__Group_6__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Scope__Group_6__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Scope__Group_6__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScopeAccess().getRCURLYTerminalRuleCall_6_3()); }
	RULE_RCURLY
{ after(grammarAccess.getScopeAccess().getRCURLYTerminalRuleCall_6_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Scope__Group_7__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Scope__Group_7__0__Impl
	rule__Scope__Group_7__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Scope__Group_7__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScopeAccess().getRolesKeyword_7_0()); }

	'roles' 

{ after(grammarAccess.getScopeAccess().getRolesKeyword_7_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Scope__Group_7__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Scope__Group_7__1__Impl
	rule__Scope__Group_7__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Scope__Group_7__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScopeAccess().getLCURLYTerminalRuleCall_7_1()); }
	RULE_LCURLY
{ after(grammarAccess.getScopeAccess().getLCURLYTerminalRuleCall_7_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Scope__Group_7__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Scope__Group_7__2__Impl
	rule__Scope__Group_7__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Scope__Group_7__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScopeAccess().getRolesAssignment_7_2()); }
(rule__Scope__RolesAssignment_7_2)
{ after(grammarAccess.getScopeAccess().getRolesAssignment_7_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Scope__Group_7__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Scope__Group_7__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Scope__Group_7__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScopeAccess().getRCURLYTerminalRuleCall_7_3()); }
	RULE_RCURLY
{ after(grammarAccess.getScopeAccess().getRCURLYTerminalRuleCall_7_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Scope__Group_8__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Scope__Group_8__0__Impl
	rule__Scope__Group_8__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Scope__Group_8__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScopeAccess().getLCURLYTerminalRuleCall_8_0()); }
	RULE_LCURLY
{ after(grammarAccess.getScopeAccess().getLCURLYTerminalRuleCall_8_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Scope__Group_8__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Scope__Group_8__1__Impl
	rule__Scope__Group_8__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Scope__Group_8__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScopeAccess().getKeyAssignment_8_1()); }
(rule__Scope__KeyAssignment_8_1)
{ after(grammarAccess.getScopeAccess().getKeyAssignment_8_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Scope__Group_8__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Scope__Group_8__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Scope__Group_8__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScopeAccess().getRCURLYTerminalRuleCall_8_2()); }
	RULE_RCURLY
{ after(grammarAccess.getScopeAccess().getRCURLYTerminalRuleCall_8_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Roles__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Roles__Group__0__Impl
	rule__Roles__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Roles__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRolesAccess().getRolesAssignment_0()); }
(rule__Roles__RolesAssignment_0)
{ after(grammarAccess.getRolesAccess().getRolesAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Roles__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Roles__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Roles__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRolesAccess().getGroup_1()); }
(rule__Roles__Group_1__0)*
{ after(grammarAccess.getRolesAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Roles__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Roles__Group_1__0__Impl
	rule__Roles__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Roles__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRolesAccess().getCOMMATerminalRuleCall_1_0()); }
	RULE_COMMA
{ after(grammarAccess.getRolesAccess().getCOMMATerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Roles__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Roles__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Roles__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRolesAccess().getRolesAssignment_1_1()); }
(rule__Roles__RolesAssignment_1_1)
{ after(grammarAccess.getRolesAccess().getRolesAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__NestedChoreography__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NestedChoreography__Group__0__Impl
	rule__NestedChoreography__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NestedChoreography__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNestedChoreographyAccess().getLCURLYTerminalRuleCall_0()); }
	RULE_LCURLY
{ after(grammarAccess.getNestedChoreographyAccess().getLCURLYTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NestedChoreography__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NestedChoreography__Group__1__Impl
	rule__NestedChoreography__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NestedChoreography__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNestedChoreographyAccess().getChoreographyAssignment_1()); }
(rule__NestedChoreography__ChoreographyAssignment_1)
{ after(grammarAccess.getNestedChoreographyAccess().getChoreographyAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NestedChoreography__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NestedChoreography__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NestedChoreography__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNestedChoreographyAccess().getRCURLYTerminalRuleCall_2()); }
	RULE_RCURLY
{ after(grammarAccess.getNestedChoreographyAccess().getRCURLYTerminalRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__AssignmentSet__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AssignmentSet__Group__0__Impl
	rule__AssignmentSet__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignmentSet__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentSetAccess().getAssignmentAssignment_0()); }
(rule__AssignmentSet__AssignmentAssignment_0)
{ after(grammarAccess.getAssignmentSetAccess().getAssignmentAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AssignmentSet__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AssignmentSet__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignmentSet__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentSetAccess().getGroup_1()); }
(rule__AssignmentSet__Group_1__0)?
{ after(grammarAccess.getAssignmentSetAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AssignmentSet__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AssignmentSet__Group_1__0__Impl
	rule__AssignmentSet__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignmentSet__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentSetAccess().getCOMMATerminalRuleCall_1_0()); }
	RULE_COMMA
{ after(grammarAccess.getAssignmentSetAccess().getCOMMATerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AssignmentSet__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AssignmentSet__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignmentSet__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentSetAccess().getContinuationAssignment_1_1()); }
(rule__AssignmentSet__ContinuationAssignment_1_1)
{ after(grammarAccess.getAssignmentSetAccess().getContinuationAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Assignment__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Assignment__Group__0__Impl
	rule__Assignment__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getNKeyword_0()); }

	'N.' 

{ after(grammarAccess.getAssignmentAccess().getNKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Assignment__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Assignment__Group__1__Impl
	rule__Assignment__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getVariableAssignment_1()); }
(rule__Assignment__VariableAssignment_1)
{ after(grammarAccess.getAssignmentAccess().getVariableAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Assignment__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Assignment__Group__2__Impl
	rule__Assignment__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getASSIGNTerminalRuleCall_2()); }
	RULE_ASSIGN
{ after(grammarAccess.getAssignmentAccess().getASSIGNTerminalRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Assignment__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Assignment__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getExpressionAssignment_3()); }
(rule__Assignment__ExpressionAssignment_3)
{ after(grammarAccess.getAssignmentAccess().getExpressionAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__SumExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SumExpression__Group__0__Impl
	rule__SumExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SumExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSumExpressionAccess().getChildrenAssignment_0()); }
(rule__SumExpression__ChildrenAssignment_0)
{ after(grammarAccess.getSumExpressionAccess().getChildrenAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SumExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SumExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SumExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSumExpressionAccess().getChildrenAssignment_1()); }
(rule__SumExpression__ChildrenAssignment_1)*
{ after(grammarAccess.getSumExpressionAccess().getChildrenAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SumExpressionTerm__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SumExpressionTerm__Group_0__0__Impl
	rule__SumExpressionTerm__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SumExpressionTerm__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSumExpressionTermAccess().getSumExpressionAddTermAction_0_0()); }
(

)
{ after(grammarAccess.getSumExpressionTermAccess().getSumExpressionAddTermAction_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SumExpressionTerm__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SumExpressionTerm__Group_0__1__Impl
	rule__SumExpressionTerm__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SumExpressionTerm__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSumExpressionTermAccess().getPLUSTerminalRuleCall_0_1()); }
	RULE_PLUS
{ after(grammarAccess.getSumExpressionTermAccess().getPLUSTerminalRuleCall_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SumExpressionTerm__Group_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SumExpressionTerm__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SumExpressionTerm__Group_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSumExpressionTermAccess().getExpressionAssignment_0_2()); }
(rule__SumExpressionTerm__ExpressionAssignment_0_2)
{ after(grammarAccess.getSumExpressionTermAccess().getExpressionAssignment_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__SumExpressionTerm__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SumExpressionTerm__Group_1__0__Impl
	rule__SumExpressionTerm__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SumExpressionTerm__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSumExpressionTermAccess().getSumExpressionSubtractTermAction_1_0()); }
(

)
{ after(grammarAccess.getSumExpressionTermAccess().getSumExpressionSubtractTermAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SumExpressionTerm__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SumExpressionTerm__Group_1__1__Impl
	rule__SumExpressionTerm__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SumExpressionTerm__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSumExpressionTermAccess().getMINUSTerminalRuleCall_1_1()); }
	RULE_MINUS
{ after(grammarAccess.getSumExpressionTermAccess().getMINUSTerminalRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SumExpressionTerm__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SumExpressionTerm__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SumExpressionTerm__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSumExpressionTermAccess().getExpressionAssignment_1_2()); }
(rule__SumExpressionTerm__ExpressionAssignment_1_2)
{ after(grammarAccess.getSumExpressionTermAccess().getExpressionAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ExpressionBasicTerm__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExpressionBasicTerm__Group_2__0__Impl
	rule__ExpressionBasicTerm__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionBasicTerm__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionBasicTermAccess().getLPARENTerminalRuleCall_2_0()); }
	RULE_LPAREN
{ after(grammarAccess.getExpressionBasicTermAccess().getLPARENTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExpressionBasicTerm__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExpressionBasicTerm__Group_2__1__Impl
	rule__ExpressionBasicTerm__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionBasicTerm__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionBasicTermAccess().getExpressionAssignment_2_1()); }
(rule__ExpressionBasicTerm__ExpressionAssignment_2_1)
{ after(grammarAccess.getExpressionBasicTermAccess().getExpressionAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExpressionBasicTerm__Group_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExpressionBasicTerm__Group_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionBasicTerm__Group_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionBasicTermAccess().getRPARENTerminalRuleCall_2_2()); }
	RULE_RPAREN
{ after(grammarAccess.getExpressionBasicTermAccess().getRPARENTerminalRuleCall_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__CompareCondition__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CompareCondition__Group__0__Impl
	rule__CompareCondition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CompareCondition__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompareConditionAccess().getAlternatives_0()); }
(rule__CompareCondition__Alternatives_0)
{ after(grammarAccess.getCompareConditionAccess().getAlternatives_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CompareCondition__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CompareCondition__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CompareCondition__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompareConditionAccess().getGroup_1()); }
(rule__CompareCondition__Group_1__0)?
{ after(grammarAccess.getCompareConditionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__CompareCondition__Group_0_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CompareCondition__Group_0_0__0__Impl
	rule__CompareCondition__Group_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CompareCondition__Group_0_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompareConditionAccess().getLeftExpressionAssignment_0_0_0()); }
(rule__CompareCondition__LeftExpressionAssignment_0_0_0)
{ after(grammarAccess.getCompareConditionAccess().getLeftExpressionAssignment_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CompareCondition__Group_0_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CompareCondition__Group_0_0__1__Impl
	rule__CompareCondition__Group_0_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CompareCondition__Group_0_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompareConditionAccess().getOperatorAssignment_0_0_1()); }
(rule__CompareCondition__OperatorAssignment_0_0_1)
{ after(grammarAccess.getCompareConditionAccess().getOperatorAssignment_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CompareCondition__Group_0_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CompareCondition__Group_0_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CompareCondition__Group_0_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompareConditionAccess().getRightExpressionAssignment_0_0_2()); }
(rule__CompareCondition__RightExpressionAssignment_0_0_2)
{ after(grammarAccess.getCompareConditionAccess().getRightExpressionAssignment_0_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__CompareCondition__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CompareCondition__Group_1__0__Impl
	rule__CompareCondition__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CompareCondition__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompareConditionAccess().getAlternatives_1_0()); }
(rule__CompareCondition__Alternatives_1_0)
{ after(grammarAccess.getCompareConditionAccess().getAlternatives_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CompareCondition__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CompareCondition__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CompareCondition__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompareConditionAccess().getNextAssignment_1_1()); }
(rule__CompareCondition__NextAssignment_1_1)
{ after(grammarAccess.getCompareConditionAccess().getNextAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__AiocJ__AiocAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAiocJAccess().getAiocAiocParserRuleCall_0_0()); }
	ruleAioc{ after(grammarAccess.getAiocJAccess().getAiocAiocParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AiocJ__RuleSetAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAiocJAccess().getRuleSetRuleParserRuleCall_1_0()); }
	ruleRule{ after(grammarAccess.getAiocJAccess().getRuleSetRuleParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Aioc__PreambleAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAiocAccess().getPreamblePreambleParserRuleCall_2_0()); }
	rulePreamble{ after(grammarAccess.getAiocAccess().getPreamblePreambleParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Aioc__ChoreographyAssignment_6
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAiocAccess().getChoreographyChoreographyParserRuleCall_6_0()); }
	ruleChoreography{ after(grammarAccess.getAiocAccess().getChoreographyChoreographyParserRuleCall_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__WhereAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleAccess().getWhereWhereParserRuleCall_4_0()); }
	ruleWhere{ after(grammarAccess.getRuleAccess().getWhereWhereParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__ChoreographyAssignment_8
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleAccess().getChoreographyChoreographyParserRuleCall_8_0()); }
	ruleChoreography{ after(grammarAccess.getRuleAccess().getChoreographyChoreographyParserRuleCall_8_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Where__WhereConditionAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhereAccess().getWhereConditionWhereCompareConditionParserRuleCall_0()); }
	ruleWhereCompareCondition{ after(grammarAccess.getWhereAccess().getWhereConditionWhereCompareConditionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__WhereExpressionBasicTerm__NVariableAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhereExpressionBasicTermAccess().getNVariableIDTerminalRuleCall_0_1_0()); }
	RULE_ID{ after(grammarAccess.getWhereExpressionBasicTermAccess().getNVariableIDTerminalRuleCall_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__WhereExpressionBasicTerm__EVariableAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhereExpressionBasicTermAccess().getEVariableIDTerminalRuleCall_1_1_0()); }
	RULE_ID{ after(grammarAccess.getWhereExpressionBasicTermAccess().getEVariableIDTerminalRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__WhereExpressionBasicTerm__SVariableAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhereExpressionBasicTermAccess().getSVariableIDTerminalRuleCall_2_0()); }
	RULE_ID{ after(grammarAccess.getWhereExpressionBasicTermAccess().getSVariableIDTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__WhereCompareCondition__LeftExpressionAssignment_0_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhereCompareConditionAccess().getLeftExpressionWhereExpressionBasicTermParserRuleCall_0_0_0_0()); }
	ruleWhereExpressionBasicTerm{ after(grammarAccess.getWhereCompareConditionAccess().getLeftExpressionWhereExpressionBasicTermParserRuleCall_0_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__WhereCompareCondition__OperatorAssignment_0_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhereCompareConditionAccess().getOperatorConditionOperatorParserRuleCall_0_0_1_0()); }
	ruleConditionOperator{ after(grammarAccess.getWhereCompareConditionAccess().getOperatorConditionOperatorParserRuleCall_0_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__WhereCompareCondition__RightExpressionAssignment_0_0_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhereCompareConditionAccess().getRightExpressionExpressionParserRuleCall_0_0_2_0()); }
	ruleExpression{ after(grammarAccess.getWhereCompareConditionAccess().getRightExpressionExpressionParserRuleCall_0_0_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__WhereCompareCondition__TrueAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhereCompareConditionAccess().getTrueTRUETerminalRuleCall_0_1_0()); }
	RULE_TRUE{ after(grammarAccess.getWhereCompareConditionAccess().getTrueTRUETerminalRuleCall_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__WhereCompareCondition__FalseAssignment_0_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhereCompareConditionAccess().getFalseFALSETerminalRuleCall_0_2_0()); }
	RULE_FALSE{ after(grammarAccess.getWhereCompareConditionAccess().getFalseFALSETerminalRuleCall_0_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__WhereCompareCondition__LogicOpAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhereCompareConditionAccess().getLogicOpWhereLogicOpParserRuleCall_1_0_0()); }
	ruleWhereLogicOp{ after(grammarAccess.getWhereCompareConditionAccess().getLogicOpWhereLogicOpParserRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__WhereCompareCondition__ContinuationAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhereCompareConditionAccess().getContinuationWhereCompareConditionParserRuleCall_1_1_0()); }
	ruleWhereCompareCondition{ after(grammarAccess.getWhereCompareConditionAccess().getContinuationWhereCompareConditionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__WhereLogicOp__AndAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhereLogicOpAccess().getAndANDTerminalRuleCall_0_0()); }
	RULE_AND{ after(grammarAccess.getWhereLogicOpAccess().getAndANDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__WhereLogicOp__OrAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhereLogicOpAccess().getOrORTerminalRuleCall_1_0()); }
	RULE_OR{ after(grammarAccess.getWhereLogicOpAccess().getOrORTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Preamble__StarterAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPreambleAccess().getStarterIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getPreambleAccess().getStarterIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Preamble__LocDefinitionAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPreambleAccess().getLocDefinitionLocationDefinitionParserRuleCall_2_0()); }
	ruleLocationDefinition{ after(grammarAccess.getPreambleAccess().getLocDefinitionLocationDefinitionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LocationDefinition__RoleAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocationDefinitionAccess().getRoleIDTerminalRuleCall_2_0()); }
	RULE_ID{ after(grammarAccess.getLocationDefinitionAccess().getRoleIDTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LocationDefinition__LocationAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocationDefinitionAccess().getLocationSTRINGTerminalRuleCall_4_0()); }
	RULE_STRING{ after(grammarAccess.getLocationDefinitionAccess().getLocationSTRINGTerminalRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LocationDefinition__ContinuationAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocationDefinitionAccess().getContinuationLocationDefinitionParserRuleCall_5_0()); }
	ruleLocationDefinition{ after(grammarAccess.getLocationDefinitionAccess().getContinuationLocationDefinitionParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Choreography__SeqBlockAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getChoreographyAccess().getSeqBlockSeqBlockParserRuleCall_0_0()); }
	ruleSeqBlock{ after(grammarAccess.getChoreographyAccess().getSeqBlockSeqBlockParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Choreography__NextAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getChoreographyAccess().getNextChoreographyParserRuleCall_1_1_0()); }
	ruleChoreography{ after(grammarAccess.getChoreographyAccess().getNextChoreographyParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SeqBlock__EventAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSeqBlockAccess().getEventAlternatives_0_0()); }
(rule__SeqBlock__EventAlternatives_0_0)
{ after(grammarAccess.getSeqBlockAccess().getEventAlternatives_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SeqBlock__NextAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSeqBlockAccess().getNextSeqBlockParserRuleCall_1_1_0()); }
	ruleSeqBlock{ after(grammarAccess.getSeqBlockAccess().getNextSeqBlockParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Skip__SkipAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSkipAccess().getSkipSkipKeyword_0()); }
(
{ before(grammarAccess.getSkipAccess().getSkipSkipKeyword_0()); }

	'skip' 

{ after(grammarAccess.getSkipAccess().getSkipSkipKeyword_0()); }
)

{ after(grammarAccess.getSkipAccess().getSkipSkipKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Interaction__OperationAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInteractionAccess().getOperationIDTerminalRuleCall_0_0()); }
	RULE_ID{ after(grammarAccess.getInteractionAccess().getOperationIDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Interaction__SenderAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInteractionAccess().getSenderIDTerminalRuleCall_2_0()); }
	RULE_ID{ after(grammarAccess.getInteractionAccess().getSenderIDTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Interaction__SenderExpressionAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInteractionAccess().getSenderExpressionExpressionBasicTermParserRuleCall_4_0()); }
	ruleExpressionBasicTerm{ after(grammarAccess.getInteractionAccess().getSenderExpressionExpressionBasicTermParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Interaction__ReceiverAssignment_7
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInteractionAccess().getReceiverIDTerminalRuleCall_7_0()); }
	RULE_ID{ after(grammarAccess.getInteractionAccess().getReceiverIDTerminalRuleCall_7_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Interaction__ReceiverVariableAssignment_9
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInteractionAccess().getReceiverVariableIDTerminalRuleCall_9_0()); }
	RULE_ID{ after(grammarAccess.getInteractionAccess().getReceiverVariableIDTerminalRuleCall_9_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LocalCode__ResultVariableAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocalCodeAccess().getResultVariableIDTerminalRuleCall_0_1_0()); }
	RULE_ID{ after(grammarAccess.getLocalCodeAccess().getResultVariableIDTerminalRuleCall_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LocalCode__ThreadAssignment_0_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocalCodeAccess().getThreadIDTerminalRuleCall_0_3_0()); }
	RULE_ID{ after(grammarAccess.getLocalCodeAccess().getThreadIDTerminalRuleCall_0_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LocalCode__QuestionAssignment_0_7
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocalCodeAccess().getQuestionExpressionParserRuleCall_0_7_0()); }
	ruleExpression{ after(grammarAccess.getLocalCodeAccess().getQuestionExpressionParserRuleCall_0_7_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LocalCode__VariableAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocalCodeAccess().getVariableIDTerminalRuleCall_1_1_0()); }
	RULE_ID{ after(grammarAccess.getLocalCodeAccess().getVariableIDTerminalRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LocalCode__ThreadAssignment_1_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocalCodeAccess().getThreadIDTerminalRuleCall_1_3_0()); }
	RULE_ID{ after(grammarAccess.getLocalCodeAccess().getThreadIDTerminalRuleCall_1_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LocalCode__ExpressionAssignment_1_7
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocalCodeAccess().getExpressionExpressionParserRuleCall_1_7_0()); }
	ruleExpression{ after(grammarAccess.getLocalCodeAccess().getExpressionExpressionParserRuleCall_1_7_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LocalCode__VariableAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocalCodeAccess().getVariableIDTerminalRuleCall_2_1_0()); }
	RULE_ID{ after(grammarAccess.getLocalCodeAccess().getVariableIDTerminalRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LocalCode__ThreadAssignment_2_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocalCodeAccess().getThreadIDTerminalRuleCall_2_3_0()); }
	RULE_ID{ after(grammarAccess.getLocalCodeAccess().getThreadIDTerminalRuleCall_2_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LocalCode__ExpressionAssignment_2_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocalCodeAccess().getExpressionExpressionParserRuleCall_2_5_0()); }
	ruleExpression{ after(grammarAccess.getLocalCodeAccess().getExpressionExpressionParserRuleCall_2_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IfThenElse__KeyAssignment_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfThenElseAccess().getKeyIDTerminalRuleCall_0_0_0()); }
	RULE_ID{ after(grammarAccess.getIfThenElseAccess().getKeyIDTerminalRuleCall_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IfThenElse__ConditionAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfThenElseAccess().getConditionConditionParserRuleCall_3_0()); }
	ruleCondition{ after(grammarAccess.getIfThenElseAccess().getConditionConditionParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IfThenElse__ThreadAssignment_6
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfThenElseAccess().getThreadIDTerminalRuleCall_6_0()); }
	RULE_ID{ after(grammarAccess.getIfThenElseAccess().getThreadIDTerminalRuleCall_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IfThenElse__ThenAssignment_8
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfThenElseAccess().getThenChoreographyParserRuleCall_8_0()); }
	ruleChoreography{ after(grammarAccess.getIfThenElseAccess().getThenChoreographyParserRuleCall_8_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IfThenElse__ElseAssignment_10_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfThenElseAccess().getElseChoreographyParserRuleCall_10_2_0()); }
	ruleChoreography{ after(grammarAccess.getIfThenElseAccess().getElseChoreographyParserRuleCall_10_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__While__ConditionAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileAccess().getConditionConditionParserRuleCall_2_0()); }
	ruleCondition{ after(grammarAccess.getWhileAccess().getConditionConditionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__While__ThreadAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileAccess().getThreadIDTerminalRuleCall_5_0()); }
	RULE_ID{ after(grammarAccess.getWhileAccess().getThreadIDTerminalRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__While__ChoreographyAssignment_7
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileAccess().getChoreographyChoreographyParserRuleCall_7_0()); }
	ruleChoreography{ after(grammarAccess.getWhileAccess().getChoreographyChoreographyParserRuleCall_7_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__While__KeyAssignment_9_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileAccess().getKeyIDTerminalRuleCall_9_1_0()); }
	RULE_ID{ after(grammarAccess.getWhileAccess().getKeyIDTerminalRuleCall_9_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Scope__ThreadAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScopeAccess().getThreadIDTerminalRuleCall_2_0()); }
	RULE_ID{ after(grammarAccess.getScopeAccess().getThreadIDTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Scope__ChoreographyAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScopeAccess().getChoreographyChoreographyParserRuleCall_4_0()); }
	ruleChoreography{ after(grammarAccess.getScopeAccess().getChoreographyChoreographyParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Scope__PropertiesAssignment_6_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScopeAccess().getPropertiesAssignmentSetParserRuleCall_6_2_0()); }
	ruleAssignmentSet{ after(grammarAccess.getScopeAccess().getPropertiesAssignmentSetParserRuleCall_6_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Scope__RolesAssignment_7_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScopeAccess().getRolesRolesParserRuleCall_7_2_0()); }
	ruleRoles{ after(grammarAccess.getScopeAccess().getRolesRolesParserRuleCall_7_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Scope__KeyAssignment_8_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScopeAccess().getKeyIDTerminalRuleCall_8_1_0()); }
	RULE_ID{ after(grammarAccess.getScopeAccess().getKeyIDTerminalRuleCall_8_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Roles__RolesAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRolesAccess().getRolesIDTerminalRuleCall_0_0()); }
	RULE_ID{ after(grammarAccess.getRolesAccess().getRolesIDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Roles__RolesAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRolesAccess().getRolesIDTerminalRuleCall_1_1_0()); }
	RULE_ID{ after(grammarAccess.getRolesAccess().getRolesIDTerminalRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NestedChoreography__ChoreographyAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNestedChoreographyAccess().getChoreographyChoreographyParserRuleCall_1_0()); }
	ruleChoreography{ after(grammarAccess.getNestedChoreographyAccess().getChoreographyChoreographyParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AssignmentSet__AssignmentAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentSetAccess().getAssignmentAssignmentParserRuleCall_0_0()); }
	ruleAssignment{ after(grammarAccess.getAssignmentSetAccess().getAssignmentAssignmentParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AssignmentSet__ContinuationAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentSetAccess().getContinuationAssignmentSetParserRuleCall_1_1_0()); }
	ruleAssignmentSet{ after(grammarAccess.getAssignmentSetAccess().getContinuationAssignmentSetParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__VariableAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getVariableIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getAssignmentAccess().getVariableIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__ExpressionAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getExpressionExpressionParserRuleCall_3_0()); }
	ruleExpression{ after(grammarAccess.getAssignmentAccess().getExpressionExpressionParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__SumExpressionAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getSumExpressionSumExpressionParserRuleCall_0()); }
	ruleSumExpression{ after(grammarAccess.getExpressionAccess().getSumExpressionSumExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SumExpression__ChildrenAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSumExpressionAccess().getChildrenExpressionBasicTermParserRuleCall_0_0()); }
	ruleExpressionBasicTerm{ after(grammarAccess.getSumExpressionAccess().getChildrenExpressionBasicTermParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SumExpression__ChildrenAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSumExpressionAccess().getChildrenSumExpressionTermParserRuleCall_1_0()); }
	ruleSumExpressionTerm{ after(grammarAccess.getSumExpressionAccess().getChildrenSumExpressionTermParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SumExpressionTerm__ExpressionAssignment_0_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSumExpressionTermAccess().getExpressionExpressionBasicTermParserRuleCall_0_2_0()); }
	ruleExpressionBasicTerm{ after(grammarAccess.getSumExpressionTermAccess().getExpressionExpressionBasicTermParserRuleCall_0_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SumExpressionTerm__ExpressionAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSumExpressionTermAccess().getExpressionExpressionBasicTermParserRuleCall_1_2_0()); }
	ruleExpressionBasicTerm{ after(grammarAccess.getSumExpressionTermAccess().getExpressionExpressionBasicTermParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionBasicTerm__VariableAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionBasicTermAccess().getVariableIDTerminalRuleCall_0_0()); }
	RULE_ID{ after(grammarAccess.getExpressionBasicTermAccess().getVariableIDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionBasicTerm__ConstantAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionBasicTermAccess().getConstantConstantParserRuleCall_1_0()); }
	ruleConstant{ after(grammarAccess.getExpressionBasicTermAccess().getConstantConstantParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionBasicTerm__ExpressionAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionBasicTermAccess().getExpressionExpressionParserRuleCall_2_1_0()); }
	ruleExpression{ after(grammarAccess.getExpressionBasicTermAccess().getExpressionExpressionParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Constant__IntValueAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantAccess().getIntValueINTTerminalRuleCall_0_0()); }
	RULE_INT{ after(grammarAccess.getConstantAccess().getIntValueINTTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Constant__StrValueAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantAccess().getStrValueSTRINGTerminalRuleCall_1_0()); }
	RULE_STRING{ after(grammarAccess.getConstantAccess().getStrValueSTRINGTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Constant__TrueAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantAccess().getTrueTRUETerminalRuleCall_2_0()); }
	RULE_TRUE{ after(grammarAccess.getConstantAccess().getTrueTRUETerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Constant__FalseAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantAccess().getFalseFALSETerminalRuleCall_3_0()); }
	RULE_FALSE{ after(grammarAccess.getConstantAccess().getFalseFALSETerminalRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__CompareConditionAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionAccess().getCompareConditionCompareConditionParserRuleCall_0()); }
	ruleCompareCondition{ after(grammarAccess.getConditionAccess().getCompareConditionCompareConditionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CompareCondition__LeftExpressionAssignment_0_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompareConditionAccess().getLeftExpressionExpressionParserRuleCall_0_0_0_0()); }
	ruleExpression{ after(grammarAccess.getCompareConditionAccess().getLeftExpressionExpressionParserRuleCall_0_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CompareCondition__OperatorAssignment_0_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompareConditionAccess().getOperatorConditionOperatorParserRuleCall_0_0_1_0()); }
	ruleConditionOperator{ after(grammarAccess.getCompareConditionAccess().getOperatorConditionOperatorParserRuleCall_0_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CompareCondition__RightExpressionAssignment_0_0_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompareConditionAccess().getRightExpressionExpressionParserRuleCall_0_0_2_0()); }
	ruleExpression{ after(grammarAccess.getCompareConditionAccess().getRightExpressionExpressionParserRuleCall_0_0_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CompareCondition__TrueAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompareConditionAccess().getTrueTRUETerminalRuleCall_0_1_0()); }
	RULE_TRUE{ after(grammarAccess.getCompareConditionAccess().getTrueTRUETerminalRuleCall_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CompareCondition__FalseAssignment_0_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompareConditionAccess().getFalseFALSETerminalRuleCall_0_2_0()); }
	RULE_FALSE{ after(grammarAccess.getCompareConditionAccess().getFalseFALSETerminalRuleCall_0_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CompareCondition__AndAssignment_1_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompareConditionAccess().getAndANDTerminalRuleCall_1_0_0_0()); }
	RULE_AND{ after(grammarAccess.getCompareConditionAccess().getAndANDTerminalRuleCall_1_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CompareCondition__OrAssignment_1_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompareConditionAccess().getOrORTerminalRuleCall_1_0_1_0()); }
	RULE_OR{ after(grammarAccess.getCompareConditionAccess().getOrORTerminalRuleCall_1_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CompareCondition__NextAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompareConditionAccess().getNextCompareConditionParserRuleCall_1_1_0()); }
	ruleCompareCondition{ after(grammarAccess.getCompareConditionAccess().getNextCompareConditionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionOperator__LessAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionOperatorAccess().getLessLESSTerminalRuleCall_0_0()); }
	RULE_LESS{ after(grammarAccess.getConditionOperatorAccess().getLessLESSTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionOperator__EqualAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionOperatorAccess().getEqualEQUALTerminalRuleCall_1_0()); }
	RULE_EQUAL{ after(grammarAccess.getConditionOperatorAccess().getEqualEQUALTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionOperator__GreaterAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionOperatorAccess().getGreaterGREATERTerminalRuleCall_2_0()); }
	RULE_GREATER{ after(grammarAccess.getConditionOperatorAccess().getGreaterGREATERTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionOperator__Not_equalAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionOperatorAccess().getNot_equalNOT_EQUALTerminalRuleCall_3_0()); }
	RULE_NOT_EQUAL{ after(grammarAccess.getConditionOperatorAccess().getNot_equalNOT_EQUALTerminalRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_LCURLY : '{';

RULE_RCURLY : '}';

RULE_LSQUARE : '[';

RULE_RSQUARE : ']';

RULE_ARROW : '->';

RULE_SEMICOLON : ';';

RULE_PIPE : '|';

RULE_COLON : ':';

RULE_PLUS : '+';

RULE_TIMES : '*';

RULE_MINUS : '-';

RULE_QUESTION_MARK : '?';

RULE_BANG : '!';

RULE_AT : '@';

RULE_ASSIGN : '=';

RULE_DOT : '.';

RULE_LPAREN : '(';

RULE_RPAREN : ')';

RULE_COMMA : ',';

RULE_LESS : '<';

RULE_EQUAL : '==';

RULE_GREATER : '>';

RULE_NOT_EQUAL : '!=';

RULE_AND : 'and';

RULE_OR : 'or';

RULE_TRUE : 'true';

RULE_FALSE : 'false';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


