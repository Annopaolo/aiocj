/*
* generated by Xtext
*/
package org.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class AiocGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class AiocJElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AiocJ");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cAiocAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cAiocAiocParserRuleCall_0_0 = (RuleCall)cAiocAssignment_0.eContents().get(0);
		private final Assignment cRuleSetAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cRuleSetRuleParserRuleCall_1_0 = (RuleCall)cRuleSetAssignment_1.eContents().get(0);
		
		//AiocJ:
		//	aioc=Aioc | ruleSet+=Rule*;
		public ParserRule getRule() { return rule; }

		//aioc=Aioc | ruleSet+=Rule*
		public Alternatives getAlternatives() { return cAlternatives; }

		//aioc=Aioc
		public Assignment getAiocAssignment_0() { return cAiocAssignment_0; }

		//Aioc
		public RuleCall getAiocAiocParserRuleCall_0_0() { return cAiocAiocParserRuleCall_0_0; }

		//ruleSet+=Rule*
		public Assignment getRuleSetAssignment_1() { return cRuleSetAssignment_1; }

		//Rule
		public RuleCall getRuleSetRuleParserRuleCall_1_0() { return cRuleSetRuleParserRuleCall_1_0; }
	}

	public class AiocElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Aioc");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFunctionLocationAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFunctionLocationFunctionLocationParserRuleCall_0_0 = (RuleCall)cFunctionLocationAssignment_0.eContents().get(0);
		private final Keyword cPreambleKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cLCURLYTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cPreambleAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPreamblePreambleParserRuleCall_3_0 = (RuleCall)cPreambleAssignment_3.eContents().get(0);
		private final RuleCall cRCURLYTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Keyword cAiocKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final RuleCall cLCURLYTerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		private final Assignment cChoreographyAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cChoreographyChoreographyParserRuleCall_7_0 = (RuleCall)cChoreographyAssignment_7.eContents().get(0);
		private final RuleCall cRCURLYTerminalRuleCall_8 = (RuleCall)cGroup.eContents().get(8);
		
		//Aioc:
		//	functionLocation+=FunctionLocation* "preamble" LCURLY preamble=Preamble RCURLY "aioc" LCURLY choreography=Choreography
		//	RCURLY;
		public ParserRule getRule() { return rule; }

		//functionLocation+=FunctionLocation* "preamble" LCURLY preamble=Preamble RCURLY "aioc" LCURLY choreography=Choreography
		//RCURLY
		public Group getGroup() { return cGroup; }

		//functionLocation+=FunctionLocation*
		public Assignment getFunctionLocationAssignment_0() { return cFunctionLocationAssignment_0; }

		//FunctionLocation
		public RuleCall getFunctionLocationFunctionLocationParserRuleCall_0_0() { return cFunctionLocationFunctionLocationParserRuleCall_0_0; }

		//"preamble"
		public Keyword getPreambleKeyword_1() { return cPreambleKeyword_1; }

		//LCURLY
		public RuleCall getLCURLYTerminalRuleCall_2() { return cLCURLYTerminalRuleCall_2; }

		//preamble=Preamble
		public Assignment getPreambleAssignment_3() { return cPreambleAssignment_3; }

		//Preamble
		public RuleCall getPreamblePreambleParserRuleCall_3_0() { return cPreamblePreambleParserRuleCall_3_0; }

		//RCURLY
		public RuleCall getRCURLYTerminalRuleCall_4() { return cRCURLYTerminalRuleCall_4; }

		//"aioc"
		public Keyword getAiocKeyword_5() { return cAiocKeyword_5; }

		//LCURLY
		public RuleCall getLCURLYTerminalRuleCall_6() { return cLCURLYTerminalRuleCall_6; }

		//choreography=Choreography
		public Assignment getChoreographyAssignment_7() { return cChoreographyAssignment_7; }

		//Choreography
		public RuleCall getChoreographyChoreographyParserRuleCall_7_0() { return cChoreographyChoreographyParserRuleCall_7_0; }

		//RCURLY
		public RuleCall getRCURLYTerminalRuleCall_8() { return cRCURLYTerminalRuleCall_8; }
	}

	public class RuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Rule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRuleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cLCURLYTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cFunctionLocationAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFunctionLocationFunctionLocationParserRuleCall_2_0 = (RuleCall)cFunctionLocationAssignment_2.eContents().get(0);
		private final Keyword cOnKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final RuleCall cLCURLYTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Assignment cWhereAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cWhereWhereParserRuleCall_5_0 = (RuleCall)cWhereAssignment_5.eContents().get(0);
		private final RuleCall cRCURLYTerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		private final Keyword cDoKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final RuleCall cLCURLYTerminalRuleCall_8 = (RuleCall)cGroup.eContents().get(8);
		private final Assignment cChoreographyAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cChoreographyChoreographyParserRuleCall_9_0 = (RuleCall)cChoreographyAssignment_9.eContents().get(0);
		private final RuleCall cRCURLYTerminalRuleCall_10 = (RuleCall)cGroup.eContents().get(10);
		private final RuleCall cRCURLYTerminalRuleCall_11 = (RuleCall)cGroup.eContents().get(11);
		
		//Rule:
		//	"rule" LCURLY functionLocation+=FunctionLocation* "on" LCURLY where=Where RCURLY "do" LCURLY choreography=Choreography
		//	RCURLY RCURLY;
		public ParserRule getRule() { return rule; }

		//"rule" LCURLY functionLocation+=FunctionLocation* "on" LCURLY where=Where RCURLY "do" LCURLY choreography=Choreography
		//RCURLY RCURLY
		public Group getGroup() { return cGroup; }

		//"rule"
		public Keyword getRuleKeyword_0() { return cRuleKeyword_0; }

		//LCURLY
		public RuleCall getLCURLYTerminalRuleCall_1() { return cLCURLYTerminalRuleCall_1; }

		//functionLocation+=FunctionLocation*
		public Assignment getFunctionLocationAssignment_2() { return cFunctionLocationAssignment_2; }

		//FunctionLocation
		public RuleCall getFunctionLocationFunctionLocationParserRuleCall_2_0() { return cFunctionLocationFunctionLocationParserRuleCall_2_0; }

		//"on"
		public Keyword getOnKeyword_3() { return cOnKeyword_3; }

		//LCURLY
		public RuleCall getLCURLYTerminalRuleCall_4() { return cLCURLYTerminalRuleCall_4; }

		//where=Where
		public Assignment getWhereAssignment_5() { return cWhereAssignment_5; }

		//Where
		public RuleCall getWhereWhereParserRuleCall_5_0() { return cWhereWhereParserRuleCall_5_0; }

		//RCURLY
		public RuleCall getRCURLYTerminalRuleCall_6() { return cRCURLYTerminalRuleCall_6; }

		//"do"
		public Keyword getDoKeyword_7() { return cDoKeyword_7; }

		//LCURLY
		public RuleCall getLCURLYTerminalRuleCall_8() { return cLCURLYTerminalRuleCall_8; }

		//choreography=Choreography
		public Assignment getChoreographyAssignment_9() { return cChoreographyAssignment_9; }

		//Choreography
		public RuleCall getChoreographyChoreographyParserRuleCall_9_0() { return cChoreographyChoreographyParserRuleCall_9_0; }

		//RCURLY
		public RuleCall getRCURLYTerminalRuleCall_10() { return cRCURLYTerminalRuleCall_10; }

		//RCURLY
		public RuleCall getRCURLYTerminalRuleCall_11() { return cRCURLYTerminalRuleCall_11; }
	}

	public class WhereElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Where");
		private final Assignment cWhereConditionAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cWhereConditionWhereCompareConditionParserRuleCall_0 = (RuleCall)cWhereConditionAssignment.eContents().get(0);
		
		//Where:
		//	whereCondition=WhereCompareCondition;
		public ParserRule getRule() { return rule; }

		//whereCondition=WhereCompareCondition
		public Assignment getWhereConditionAssignment() { return cWhereConditionAssignment; }

		//WhereCompareCondition
		public RuleCall getWhereConditionWhereCompareConditionParserRuleCall_0() { return cWhereConditionWhereCompareConditionParserRuleCall_0; }
	}

	public class WhereExpressionBasicTermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WhereExpressionBasicTerm");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cNKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cNVariableAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNVariableIDTerminalRuleCall_0_1_0 = (RuleCall)cNVariableAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cEKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cEVariableAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cEVariableIDTerminalRuleCall_1_1_0 = (RuleCall)cEVariableAssignment_1_1.eContents().get(0);
		private final Assignment cSVariableAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cSVariableIDTerminalRuleCall_2_0 = (RuleCall)cSVariableAssignment_2.eContents().get(0);
		
		//WhereExpressionBasicTerm:
		//	"N." nVariable=ID | "E." eVariable=ID | sVariable=ID;
		public ParserRule getRule() { return rule; }

		//"N." nVariable=ID | "E." eVariable=ID | sVariable=ID
		public Alternatives getAlternatives() { return cAlternatives; }

		//"N." nVariable=ID
		public Group getGroup_0() { return cGroup_0; }

		//"N."
		public Keyword getNKeyword_0_0() { return cNKeyword_0_0; }

		//nVariable=ID
		public Assignment getNVariableAssignment_0_1() { return cNVariableAssignment_0_1; }

		//ID
		public RuleCall getNVariableIDTerminalRuleCall_0_1_0() { return cNVariableIDTerminalRuleCall_0_1_0; }

		//"E." eVariable=ID
		public Group getGroup_1() { return cGroup_1; }

		//"E."
		public Keyword getEKeyword_1_0() { return cEKeyword_1_0; }

		//eVariable=ID
		public Assignment getEVariableAssignment_1_1() { return cEVariableAssignment_1_1; }

		//ID
		public RuleCall getEVariableIDTerminalRuleCall_1_1_0() { return cEVariableIDTerminalRuleCall_1_1_0; }

		//sVariable=ID
		public Assignment getSVariableAssignment_2() { return cSVariableAssignment_2; }

		//ID
		public RuleCall getSVariableIDTerminalRuleCall_2_0() { return cSVariableIDTerminalRuleCall_2_0; }
	}

	public class WhereCompareConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WhereCompareCondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final Assignment cLeftExpressionAssignment_0_0_0 = (Assignment)cGroup_0_0.eContents().get(0);
		private final RuleCall cLeftExpressionWhereExpressionBasicTermParserRuleCall_0_0_0_0 = (RuleCall)cLeftExpressionAssignment_0_0_0.eContents().get(0);
		private final Assignment cOperatorAssignment_0_0_1 = (Assignment)cGroup_0_0.eContents().get(1);
		private final RuleCall cOperatorConditionOperatorParserRuleCall_0_0_1_0 = (RuleCall)cOperatorAssignment_0_0_1.eContents().get(0);
		private final Assignment cRightExpressionAssignment_0_0_2 = (Assignment)cGroup_0_0.eContents().get(2);
		private final RuleCall cRightExpressionExpressionParserRuleCall_0_0_2_0 = (RuleCall)cRightExpressionAssignment_0_0_2.eContents().get(0);
		private final Assignment cTrueAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final RuleCall cTrueTRUETerminalRuleCall_0_1_0 = (RuleCall)cTrueAssignment_0_1.eContents().get(0);
		private final Assignment cFalseAssignment_0_2 = (Assignment)cAlternatives_0.eContents().get(2);
		private final RuleCall cFalseFALSETerminalRuleCall_0_2_0 = (RuleCall)cFalseAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cLogicOpAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cLogicOpWhereLogicOpParserRuleCall_1_0_0 = (RuleCall)cLogicOpAssignment_1_0.eContents().get(0);
		private final Assignment cContinuationAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cContinuationWhereCompareConditionParserRuleCall_1_1_0 = (RuleCall)cContinuationAssignment_1_1.eContents().get(0);
		
		//WhereCompareCondition:
		//	(leftExpression=WhereExpressionBasicTerm operator=ConditionOperator rightExpression=Expression | true?=TRUE |
		//	false?=FALSE) (logicOp=WhereLogicOp continuation=WhereCompareCondition)?;
		public ParserRule getRule() { return rule; }

		//(leftExpression=WhereExpressionBasicTerm operator=ConditionOperator rightExpression=Expression | true?=TRUE |
		//false?=FALSE) (logicOp=WhereLogicOp continuation=WhereCompareCondition)?
		public Group getGroup() { return cGroup; }

		//leftExpression=WhereExpressionBasicTerm operator=ConditionOperator rightExpression=Expression | true?=TRUE |
		//false?=FALSE
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//leftExpression=WhereExpressionBasicTerm operator=ConditionOperator rightExpression=Expression
		public Group getGroup_0_0() { return cGroup_0_0; }

		//leftExpression=WhereExpressionBasicTerm
		public Assignment getLeftExpressionAssignment_0_0_0() { return cLeftExpressionAssignment_0_0_0; }

		//WhereExpressionBasicTerm
		public RuleCall getLeftExpressionWhereExpressionBasicTermParserRuleCall_0_0_0_0() { return cLeftExpressionWhereExpressionBasicTermParserRuleCall_0_0_0_0; }

		//operator=ConditionOperator
		public Assignment getOperatorAssignment_0_0_1() { return cOperatorAssignment_0_0_1; }

		//ConditionOperator
		public RuleCall getOperatorConditionOperatorParserRuleCall_0_0_1_0() { return cOperatorConditionOperatorParserRuleCall_0_0_1_0; }

		//rightExpression=Expression
		public Assignment getRightExpressionAssignment_0_0_2() { return cRightExpressionAssignment_0_0_2; }

		//Expression
		public RuleCall getRightExpressionExpressionParserRuleCall_0_0_2_0() { return cRightExpressionExpressionParserRuleCall_0_0_2_0; }

		//true?=TRUE
		public Assignment getTrueAssignment_0_1() { return cTrueAssignment_0_1; }

		//TRUE
		public RuleCall getTrueTRUETerminalRuleCall_0_1_0() { return cTrueTRUETerminalRuleCall_0_1_0; }

		//false?=FALSE
		public Assignment getFalseAssignment_0_2() { return cFalseAssignment_0_2; }

		//FALSE
		public RuleCall getFalseFALSETerminalRuleCall_0_2_0() { return cFalseFALSETerminalRuleCall_0_2_0; }

		//(logicOp=WhereLogicOp continuation=WhereCompareCondition)?
		public Group getGroup_1() { return cGroup_1; }

		//logicOp=WhereLogicOp
		public Assignment getLogicOpAssignment_1_0() { return cLogicOpAssignment_1_0; }

		//WhereLogicOp
		public RuleCall getLogicOpWhereLogicOpParserRuleCall_1_0_0() { return cLogicOpWhereLogicOpParserRuleCall_1_0_0; }

		//continuation=WhereCompareCondition
		public Assignment getContinuationAssignment_1_1() { return cContinuationAssignment_1_1; }

		//WhereCompareCondition
		public RuleCall getContinuationWhereCompareConditionParserRuleCall_1_1_0() { return cContinuationWhereCompareConditionParserRuleCall_1_1_0; }
	}

	public class WhereLogicOpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WhereLogicOp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cAndAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cAndANDTerminalRuleCall_0_0 = (RuleCall)cAndAssignment_0.eContents().get(0);
		private final Assignment cOrAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cOrORTerminalRuleCall_1_0 = (RuleCall)cOrAssignment_1.eContents().get(0);
		
		//WhereLogicOp:
		//	and?=AND | or?=OR;
		public ParserRule getRule() { return rule; }

		//and?=AND | or?=OR
		public Alternatives getAlternatives() { return cAlternatives; }

		//and?=AND
		public Assignment getAndAssignment_0() { return cAndAssignment_0; }

		//AND
		public RuleCall getAndANDTerminalRuleCall_0_0() { return cAndANDTerminalRuleCall_0_0; }

		//or?=OR
		public Assignment getOrAssignment_1() { return cOrAssignment_1; }

		//OR
		public RuleCall getOrORTerminalRuleCall_1_0() { return cOrORTerminalRuleCall_1_0; }
	}

	public class PreambleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Preamble");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStarterKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cStarterAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStarterIDTerminalRuleCall_1_0 = (RuleCall)cStarterAssignment_1.eContents().get(0);
		private final Assignment cLocDefinitionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLocDefinitionLocationDefinitionParserRuleCall_2_0 = (RuleCall)cLocDefinitionAssignment_2.eContents().get(0);
		
		//Preamble:
		//	"starter:" starter=ID locDefinition=LocationDefinition?;
		public ParserRule getRule() { return rule; }

		//"starter:" starter=ID locDefinition=LocationDefinition?
		public Group getGroup() { return cGroup; }

		//"starter:"
		public Keyword getStarterKeyword_0() { return cStarterKeyword_0; }

		//starter=ID
		public Assignment getStarterAssignment_1() { return cStarterAssignment_1; }

		//ID
		public RuleCall getStarterIDTerminalRuleCall_1_0() { return cStarterIDTerminalRuleCall_1_0; }

		//locDefinition=LocationDefinition?
		public Assignment getLocDefinitionAssignment_2() { return cLocDefinitionAssignment_2; }

		//LocationDefinition
		public RuleCall getLocDefinitionLocationDefinitionParserRuleCall_2_0() { return cLocDefinitionLocationDefinitionParserRuleCall_2_0; }
	}

	public class FunctionLocationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FunctionLocation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIncludeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFunctionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFunctionsFunctionListParserRuleCall_1_0 = (RuleCall)cFunctionsAssignment_1.eContents().get(0);
		private final Keyword cFromKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cLocationAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLocationSTRINGTerminalRuleCall_3_0 = (RuleCall)cLocationAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cWithKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cProtocolAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cProtocolSTRINGTerminalRuleCall_4_1_0 = (RuleCall)cProtocolAssignment_4_1.eContents().get(0);
		
		//FunctionLocation:
		//	"include" functions=FunctionList "from" location=STRING ("with" protocol=STRING)?;
		public ParserRule getRule() { return rule; }

		//"include" functions=FunctionList "from" location=STRING ("with" protocol=STRING)?
		public Group getGroup() { return cGroup; }

		//"include"
		public Keyword getIncludeKeyword_0() { return cIncludeKeyword_0; }

		//functions=FunctionList
		public Assignment getFunctionsAssignment_1() { return cFunctionsAssignment_1; }

		//FunctionList
		public RuleCall getFunctionsFunctionListParserRuleCall_1_0() { return cFunctionsFunctionListParserRuleCall_1_0; }

		//"from"
		public Keyword getFromKeyword_2() { return cFromKeyword_2; }

		//location=STRING
		public Assignment getLocationAssignment_3() { return cLocationAssignment_3; }

		//STRING
		public RuleCall getLocationSTRINGTerminalRuleCall_3_0() { return cLocationSTRINGTerminalRuleCall_3_0; }

		//("with" protocol=STRING)?
		public Group getGroup_4() { return cGroup_4; }

		//"with"
		public Keyword getWithKeyword_4_0() { return cWithKeyword_4_0; }

		//protocol=STRING
		public Assignment getProtocolAssignment_4_1() { return cProtocolAssignment_4_1; }

		//STRING
		public RuleCall getProtocolSTRINGTerminalRuleCall_4_1_0() { return cProtocolSTRINGTerminalRuleCall_4_1_0; }
	}

	public class FunctionListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FunctionList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFunctionNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFunctionNameIDTerminalRuleCall_0_0 = (RuleCall)cFunctionNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cCOMMATerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cFunctionNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cFunctionNameIDTerminalRuleCall_1_1_0 = (RuleCall)cFunctionNameAssignment_1_1.eContents().get(0);
		
		//FunctionList:
		//	functionName+=ID (COMMA functionName+=ID)*;
		public ParserRule getRule() { return rule; }

		//functionName+=ID (COMMA functionName+=ID)*
		public Group getGroup() { return cGroup; }

		//functionName+=ID
		public Assignment getFunctionNameAssignment_0() { return cFunctionNameAssignment_0; }

		//ID
		public RuleCall getFunctionNameIDTerminalRuleCall_0_0() { return cFunctionNameIDTerminalRuleCall_0_0; }

		//(COMMA functionName+=ID)*
		public Group getGroup_1() { return cGroup_1; }

		//COMMA
		public RuleCall getCOMMATerminalRuleCall_1_0() { return cCOMMATerminalRuleCall_1_0; }

		//functionName+=ID
		public Assignment getFunctionNameAssignment_1_1() { return cFunctionNameAssignment_1_1; }

		//ID
		public RuleCall getFunctionNameIDTerminalRuleCall_1_1_0() { return cFunctionNameIDTerminalRuleCall_1_1_0; }
	}

	public class LocationDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LocationDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLocationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cATTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cRoleAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRoleIDTerminalRuleCall_2_0 = (RuleCall)cRoleAssignment_2.eContents().get(0);
		private final RuleCall cCOLONTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Assignment cLocationAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cLocationSTRINGTerminalRuleCall_4_0 = (RuleCall)cLocationAssignment_4.eContents().get(0);
		private final Assignment cContinuationAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cContinuationLocationDefinitionParserRuleCall_5_0 = (RuleCall)cContinuationAssignment_5.eContents().get(0);
		
		//LocationDefinition:
		//	"location" AT role=ID COLON location=STRING continuation=LocationDefinition?;
		public ParserRule getRule() { return rule; }

		//"location" AT role=ID COLON location=STRING continuation=LocationDefinition?
		public Group getGroup() { return cGroup; }

		//"location"
		public Keyword getLocationKeyword_0() { return cLocationKeyword_0; }

		//AT
		public RuleCall getATTerminalRuleCall_1() { return cATTerminalRuleCall_1; }

		//role=ID
		public Assignment getRoleAssignment_2() { return cRoleAssignment_2; }

		//ID
		public RuleCall getRoleIDTerminalRuleCall_2_0() { return cRoleIDTerminalRuleCall_2_0; }

		//COLON
		public RuleCall getCOLONTerminalRuleCall_3() { return cCOLONTerminalRuleCall_3; }

		//location=STRING
		public Assignment getLocationAssignment_4() { return cLocationAssignment_4; }

		//STRING
		public RuleCall getLocationSTRINGTerminalRuleCall_4_0() { return cLocationSTRINGTerminalRuleCall_4_0; }

		//continuation=LocationDefinition?
		public Assignment getContinuationAssignment_5() { return cContinuationAssignment_5; }

		//LocationDefinition
		public RuleCall getContinuationLocationDefinitionParserRuleCall_5_0() { return cContinuationLocationDefinitionParserRuleCall_5_0; }
	}

	public class ChoreographyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Choreography");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSeqBlockAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSeqBlockSeqBlockParserRuleCall_0_0 = (RuleCall)cSeqBlockAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cPIPETerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cNextAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNextChoreographyParserRuleCall_1_1_0 = (RuleCall)cNextAssignment_1_1.eContents().get(0);
		
		//Choreography:
		//	seqBlock=SeqBlock (PIPE next=Choreography)?;
		public ParserRule getRule() { return rule; }

		//seqBlock=SeqBlock (PIPE next=Choreography)?
		public Group getGroup() { return cGroup; }

		//seqBlock=SeqBlock
		public Assignment getSeqBlockAssignment_0() { return cSeqBlockAssignment_0; }

		//SeqBlock
		public RuleCall getSeqBlockSeqBlockParserRuleCall_0_0() { return cSeqBlockSeqBlockParserRuleCall_0_0; }

		//(PIPE next=Choreography)?
		public Group getGroup_1() { return cGroup_1; }

		//PIPE
		public RuleCall getPIPETerminalRuleCall_1_0() { return cPIPETerminalRuleCall_1_0; }

		//next=Choreography
		public Assignment getNextAssignment_1_1() { return cNextAssignment_1_1; }

		//Choreography
		public RuleCall getNextChoreographyParserRuleCall_1_1_0() { return cNextChoreographyParserRuleCall_1_1_0; }
	}

	public class SeqBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SeqBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cEventAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cEventAlternatives_0_0 = (Alternatives)cEventAssignment_0.eContents().get(0);
		private final RuleCall cEventSkipParserRuleCall_0_0_0 = (RuleCall)cEventAlternatives_0_0.eContents().get(0);
		private final RuleCall cEventInteractionParserRuleCall_0_0_1 = (RuleCall)cEventAlternatives_0_0.eContents().get(1);
		private final RuleCall cEventLocalCodeParserRuleCall_0_0_2 = (RuleCall)cEventAlternatives_0_0.eContents().get(2);
		private final RuleCall cEventIfThenElseParserRuleCall_0_0_3 = (RuleCall)cEventAlternatives_0_0.eContents().get(3);
		private final RuleCall cEventWhileParserRuleCall_0_0_4 = (RuleCall)cEventAlternatives_0_0.eContents().get(4);
		private final RuleCall cEventScopeParserRuleCall_0_0_5 = (RuleCall)cEventAlternatives_0_0.eContents().get(5);
		private final RuleCall cEventNestedChoreographyParserRuleCall_0_0_6 = (RuleCall)cEventAlternatives_0_0.eContents().get(6);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cSEMICOLONTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cNextAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNextSeqBlockParserRuleCall_1_1_0 = (RuleCall)cNextAssignment_1_1.eContents().get(0);
		
		//SeqBlock:
		//	event=(Skip | Interaction | LocalCode | IfThenElse | While | Scope | NestedChoreography) (SEMICOLON next=SeqBlock)?;
		public ParserRule getRule() { return rule; }

		//event=(Skip | Interaction | LocalCode | IfThenElse | While | Scope | NestedChoreography) (SEMICOLON next=SeqBlock)?
		public Group getGroup() { return cGroup; }

		//event=(Skip | Interaction | LocalCode | IfThenElse | While | Scope | NestedChoreography)
		public Assignment getEventAssignment_0() { return cEventAssignment_0; }

		//Skip | Interaction | LocalCode | IfThenElse | While | Scope | NestedChoreography
		public Alternatives getEventAlternatives_0_0() { return cEventAlternatives_0_0; }

		//Skip
		public RuleCall getEventSkipParserRuleCall_0_0_0() { return cEventSkipParserRuleCall_0_0_0; }

		//Interaction
		public RuleCall getEventInteractionParserRuleCall_0_0_1() { return cEventInteractionParserRuleCall_0_0_1; }

		//LocalCode
		public RuleCall getEventLocalCodeParserRuleCall_0_0_2() { return cEventLocalCodeParserRuleCall_0_0_2; }

		//IfThenElse
		public RuleCall getEventIfThenElseParserRuleCall_0_0_3() { return cEventIfThenElseParserRuleCall_0_0_3; }

		//While
		public RuleCall getEventWhileParserRuleCall_0_0_4() { return cEventWhileParserRuleCall_0_0_4; }

		//Scope
		public RuleCall getEventScopeParserRuleCall_0_0_5() { return cEventScopeParserRuleCall_0_0_5; }

		//NestedChoreography
		public RuleCall getEventNestedChoreographyParserRuleCall_0_0_6() { return cEventNestedChoreographyParserRuleCall_0_0_6; }

		//(SEMICOLON next=SeqBlock)?
		public Group getGroup_1() { return cGroup_1; }

		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_1_0() { return cSEMICOLONTerminalRuleCall_1_0; }

		//next=SeqBlock
		public Assignment getNextAssignment_1_1() { return cNextAssignment_1_1; }

		//SeqBlock
		public RuleCall getNextSeqBlockParserRuleCall_1_1_0() { return cNextSeqBlockParserRuleCall_1_1_0; }
	}

	public class SkipElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Skip");
		private final Assignment cSkipAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cSkipSkipKeyword_0 = (Keyword)cSkipAssignment.eContents().get(0);
		
		//Skip:
		//	skip?="skip";
		public ParserRule getRule() { return rule; }

		//skip?="skip"
		public Assignment getSkipAssignment() { return cSkipAssignment; }

		//"skip"
		public Keyword getSkipSkipKeyword_0() { return cSkipSkipKeyword_0; }
	}

	public class InteractionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Interaction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperationAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOperationIDTerminalRuleCall_0_0 = (RuleCall)cOperationAssignment_0.eContents().get(0);
		private final RuleCall cCOLONTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cSenderAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSenderIDTerminalRuleCall_2_0 = (RuleCall)cSenderAssignment_2.eContents().get(0);
		private final RuleCall cLPARENTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Assignment cSenderExpressionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cSenderExpressionExpressionBasicTermParserRuleCall_4_0 = (RuleCall)cSenderExpressionAssignment_4.eContents().get(0);
		private final RuleCall cRPARENTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final RuleCall cARROWTerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		private final Assignment cReceiverAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cReceiverIDTerminalRuleCall_7_0 = (RuleCall)cReceiverAssignment_7.eContents().get(0);
		private final RuleCall cLPARENTerminalRuleCall_8 = (RuleCall)cGroup.eContents().get(8);
		private final Assignment cReceiverVariableAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cReceiverVariableIDTerminalRuleCall_9_0 = (RuleCall)cReceiverVariableAssignment_9.eContents().get(0);
		private final RuleCall cRPARENTerminalRuleCall_10 = (RuleCall)cGroup.eContents().get(10);
		
		//Interaction:
		//	operation=ID COLON sender=ID LPAREN senderExpression=ExpressionBasicTerm? RPAREN ARROW receiver=ID LPAREN
		//	receiverVariable=ID? RPAREN;
		public ParserRule getRule() { return rule; }

		//operation=ID COLON sender=ID LPAREN senderExpression=ExpressionBasicTerm? RPAREN ARROW receiver=ID LPAREN
		//receiverVariable=ID? RPAREN
		public Group getGroup() { return cGroup; }

		//operation=ID
		public Assignment getOperationAssignment_0() { return cOperationAssignment_0; }

		//ID
		public RuleCall getOperationIDTerminalRuleCall_0_0() { return cOperationIDTerminalRuleCall_0_0; }

		//COLON
		public RuleCall getCOLONTerminalRuleCall_1() { return cCOLONTerminalRuleCall_1; }

		//sender=ID
		public Assignment getSenderAssignment_2() { return cSenderAssignment_2; }

		//ID
		public RuleCall getSenderIDTerminalRuleCall_2_0() { return cSenderIDTerminalRuleCall_2_0; }

		//LPAREN
		public RuleCall getLPARENTerminalRuleCall_3() { return cLPARENTerminalRuleCall_3; }

		//senderExpression=ExpressionBasicTerm?
		public Assignment getSenderExpressionAssignment_4() { return cSenderExpressionAssignment_4; }

		//ExpressionBasicTerm
		public RuleCall getSenderExpressionExpressionBasicTermParserRuleCall_4_0() { return cSenderExpressionExpressionBasicTermParserRuleCall_4_0; }

		//RPAREN
		public RuleCall getRPARENTerminalRuleCall_5() { return cRPARENTerminalRuleCall_5; }

		//ARROW
		public RuleCall getARROWTerminalRuleCall_6() { return cARROWTerminalRuleCall_6; }

		//receiver=ID
		public Assignment getReceiverAssignment_7() { return cReceiverAssignment_7; }

		//ID
		public RuleCall getReceiverIDTerminalRuleCall_7_0() { return cReceiverIDTerminalRuleCall_7_0; }

		//LPAREN
		public RuleCall getLPARENTerminalRuleCall_8() { return cLPARENTerminalRuleCall_8; }

		//receiverVariable=ID?
		public Assignment getReceiverVariableAssignment_9() { return cReceiverVariableAssignment_9; }

		//ID
		public RuleCall getReceiverVariableIDTerminalRuleCall_9_0() { return cReceiverVariableIDTerminalRuleCall_9_0; }

		//RPAREN
		public RuleCall getRPARENTerminalRuleCall_10() { return cRPARENTerminalRuleCall_10; }
	}

	public class LocalCodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LocalCode");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cLocalAskCommandAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cResultVariableAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cResultVariableIDTerminalRuleCall_0_1_0 = (RuleCall)cResultVariableAssignment_0_1.eContents().get(0);
		private final RuleCall cATTerminalRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final Assignment cThreadAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cThreadIDTerminalRuleCall_0_3_0 = (RuleCall)cThreadAssignment_0_3.eContents().get(0);
		private final RuleCall cASSIGNTerminalRuleCall_0_4 = (RuleCall)cGroup_0.eContents().get(4);
		private final Keyword cGetInputKeyword_0_5 = (Keyword)cGroup_0.eContents().get(5);
		private final RuleCall cLPARENTerminalRuleCall_0_6 = (RuleCall)cGroup_0.eContents().get(6);
		private final Assignment cQuestionAssignment_0_7 = (Assignment)cGroup_0.eContents().get(7);
		private final RuleCall cQuestionExpressionParserRuleCall_0_7_0 = (RuleCall)cQuestionAssignment_0_7.eContents().get(0);
		private final RuleCall cRPARENTerminalRuleCall_0_8 = (RuleCall)cGroup_0.eContents().get(8);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cLocalShowCommandAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cVariableAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cVariableIDTerminalRuleCall_1_1_0 = (RuleCall)cVariableAssignment_1_1.eContents().get(0);
		private final RuleCall cATTerminalRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		private final Assignment cThreadAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cThreadIDTerminalRuleCall_1_3_0 = (RuleCall)cThreadAssignment_1_3.eContents().get(0);
		private final RuleCall cASSIGNTerminalRuleCall_1_4 = (RuleCall)cGroup_1.eContents().get(4);
		private final Keyword cShowKeyword_1_5 = (Keyword)cGroup_1.eContents().get(5);
		private final RuleCall cLPARENTerminalRuleCall_1_6 = (RuleCall)cGroup_1.eContents().get(6);
		private final Assignment cExpressionAssignment_1_7 = (Assignment)cGroup_1.eContents().get(7);
		private final RuleCall cExpressionExpressionParserRuleCall_1_7_0 = (RuleCall)cExpressionAssignment_1_7.eContents().get(0);
		private final RuleCall cRPARENTerminalRuleCall_1_8 = (RuleCall)cGroup_1.eContents().get(8);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cLocalAssignmentCommandAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cVariableAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cVariableIDTerminalRuleCall_2_1_0 = (RuleCall)cVariableAssignment_2_1.eContents().get(0);
		private final RuleCall cATTerminalRuleCall_2_2 = (RuleCall)cGroup_2.eContents().get(2);
		private final Assignment cThreadAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cThreadIDTerminalRuleCall_2_3_0 = (RuleCall)cThreadAssignment_2_3.eContents().get(0);
		private final RuleCall cASSIGNTerminalRuleCall_2_4 = (RuleCall)cGroup_2.eContents().get(4);
		private final Alternatives cAlternatives_2_5 = (Alternatives)cGroup_2.eContents().get(5);
		private final Assignment cExpressionAssignment_2_5_0 = (Assignment)cAlternatives_2_5.eContents().get(0);
		private final RuleCall cExpressionExpressionParserRuleCall_2_5_0_0 = (RuleCall)cExpressionAssignment_2_5_0.eContents().get(0);
		private final Assignment cFunctionAssignment_2_5_1 = (Assignment)cAlternatives_2_5.eContents().get(1);
		private final RuleCall cFunctionFunctionParserRuleCall_2_5_1_0 = (RuleCall)cFunctionAssignment_2_5_1.eContents().get(0);
		
		//// Local thread code
		//LocalCode: // Ask a question to the user, e.g. result@thr = getInput( question )
		//	{LocalAskCommand} resultVariable=ID AT thread=ID ASSIGN "getInput" LPAREN question=Expression RPAREN | // Show some text, e.g. show@thr("Hello, world!")
		//	{LocalShowCommand} variable=ID AT thread=ID ASSIGN "show" LPAREN expression=Expression RPAREN | // Make an internal state assignment var@thr = e
		//	{LocalAssignmentCommand} variable=ID AT thread=ID ASSIGN (expression=Expression | function=Function);
		public ParserRule getRule() { return rule; }

		//// Ask a question to the user, e.g. result@thr = getInput( question )
		//{LocalAskCommand} resultVariable=ID AT thread=ID ASSIGN "getInput" LPAREN question=Expression RPAREN | // Show some text, e.g. show@thr("Hello, world!")
		//{LocalShowCommand} variable=ID AT thread=ID ASSIGN "show" LPAREN expression=Expression RPAREN | // Make an internal state assignment var@thr = e
		//{LocalAssignmentCommand} variable=ID AT thread=ID ASSIGN (expression=Expression | function=Function)
		public Alternatives getAlternatives() { return cAlternatives; }

		//// Ask a question to the user, e.g. result@thr = getInput( question )
		//{LocalAskCommand} resultVariable=ID AT thread=ID ASSIGN "getInput" LPAREN question=Expression RPAREN
		public Group getGroup_0() { return cGroup_0; }

		//// Ask a question to the user, e.g. result@thr = getInput( question )
		//{LocalAskCommand}
		public Action getLocalAskCommandAction_0_0() { return cLocalAskCommandAction_0_0; }

		//resultVariable=ID
		public Assignment getResultVariableAssignment_0_1() { return cResultVariableAssignment_0_1; }

		//ID
		public RuleCall getResultVariableIDTerminalRuleCall_0_1_0() { return cResultVariableIDTerminalRuleCall_0_1_0; }

		//AT
		public RuleCall getATTerminalRuleCall_0_2() { return cATTerminalRuleCall_0_2; }

		//thread=ID
		public Assignment getThreadAssignment_0_3() { return cThreadAssignment_0_3; }

		//ID
		public RuleCall getThreadIDTerminalRuleCall_0_3_0() { return cThreadIDTerminalRuleCall_0_3_0; }

		//ASSIGN
		public RuleCall getASSIGNTerminalRuleCall_0_4() { return cASSIGNTerminalRuleCall_0_4; }

		//"getInput"
		public Keyword getGetInputKeyword_0_5() { return cGetInputKeyword_0_5; }

		//LPAREN
		public RuleCall getLPARENTerminalRuleCall_0_6() { return cLPARENTerminalRuleCall_0_6; }

		//question=Expression
		public Assignment getQuestionAssignment_0_7() { return cQuestionAssignment_0_7; }

		//Expression
		public RuleCall getQuestionExpressionParserRuleCall_0_7_0() { return cQuestionExpressionParserRuleCall_0_7_0; }

		//RPAREN
		public RuleCall getRPARENTerminalRuleCall_0_8() { return cRPARENTerminalRuleCall_0_8; }

		//// Show some text, e.g. show@thr("Hello, world!")
		//{LocalShowCommand} variable=ID AT thread=ID ASSIGN "show" LPAREN expression=Expression RPAREN
		public Group getGroup_1() { return cGroup_1; }

		//// Show some text, e.g. show@thr("Hello, world!")
		//{LocalShowCommand}
		public Action getLocalShowCommandAction_1_0() { return cLocalShowCommandAction_1_0; }

		//variable=ID
		public Assignment getVariableAssignment_1_1() { return cVariableAssignment_1_1; }

		//ID
		public RuleCall getVariableIDTerminalRuleCall_1_1_0() { return cVariableIDTerminalRuleCall_1_1_0; }

		//AT
		public RuleCall getATTerminalRuleCall_1_2() { return cATTerminalRuleCall_1_2; }

		//thread=ID
		public Assignment getThreadAssignment_1_3() { return cThreadAssignment_1_3; }

		//ID
		public RuleCall getThreadIDTerminalRuleCall_1_3_0() { return cThreadIDTerminalRuleCall_1_3_0; }

		//ASSIGN
		public RuleCall getASSIGNTerminalRuleCall_1_4() { return cASSIGNTerminalRuleCall_1_4; }

		//"show"
		public Keyword getShowKeyword_1_5() { return cShowKeyword_1_5; }

		//LPAREN
		public RuleCall getLPARENTerminalRuleCall_1_6() { return cLPARENTerminalRuleCall_1_6; }

		//expression=Expression
		public Assignment getExpressionAssignment_1_7() { return cExpressionAssignment_1_7; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_7_0() { return cExpressionExpressionParserRuleCall_1_7_0; }

		//RPAREN
		public RuleCall getRPARENTerminalRuleCall_1_8() { return cRPARENTerminalRuleCall_1_8; }

		//// Make an internal state assignment var@thr = e
		//{LocalAssignmentCommand} variable=ID AT thread=ID ASSIGN (expression=Expression | function=Function)
		public Group getGroup_2() { return cGroup_2; }

		//// Make an internal state assignment var@thr = e
		//{LocalAssignmentCommand}
		public Action getLocalAssignmentCommandAction_2_0() { return cLocalAssignmentCommandAction_2_0; }

		//variable=ID
		public Assignment getVariableAssignment_2_1() { return cVariableAssignment_2_1; }

		//ID
		public RuleCall getVariableIDTerminalRuleCall_2_1_0() { return cVariableIDTerminalRuleCall_2_1_0; }

		//AT
		public RuleCall getATTerminalRuleCall_2_2() { return cATTerminalRuleCall_2_2; }

		//thread=ID
		public Assignment getThreadAssignment_2_3() { return cThreadAssignment_2_3; }

		//ID
		public RuleCall getThreadIDTerminalRuleCall_2_3_0() { return cThreadIDTerminalRuleCall_2_3_0; }

		//ASSIGN
		public RuleCall getASSIGNTerminalRuleCall_2_4() { return cASSIGNTerminalRuleCall_2_4; }

		//expression=Expression | function=Function
		public Alternatives getAlternatives_2_5() { return cAlternatives_2_5; }

		//expression=Expression
		public Assignment getExpressionAssignment_2_5_0() { return cExpressionAssignment_2_5_0; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_5_0_0() { return cExpressionExpressionParserRuleCall_2_5_0_0; }

		//function=Function
		public Assignment getFunctionAssignment_2_5_1() { return cFunctionAssignment_2_5_1; }

		//Function
		public RuleCall getFunctionFunctionParserRuleCall_2_5_1_0() { return cFunctionFunctionParserRuleCall_2_5_1_0; }
	}

	public class IfThenElseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IfThenElse");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cKeyAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cKeyIDTerminalRuleCall_0_0_0 = (RuleCall)cKeyAssignment_0_0.eContents().get(0);
		private final RuleCall cCOLONTerminalRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cIfKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cLPARENTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cConditionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cConditionConditionParserRuleCall_3_0 = (RuleCall)cConditionAssignment_3.eContents().get(0);
		private final RuleCall cRPARENTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final RuleCall cATTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Assignment cThreadAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cThreadIDTerminalRuleCall_6_0 = (RuleCall)cThreadAssignment_6.eContents().get(0);
		private final RuleCall cLCURLYTerminalRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		private final Assignment cThenAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cThenChoreographyParserRuleCall_8_0 = (RuleCall)cThenAssignment_8.eContents().get(0);
		private final RuleCall cRCURLYTerminalRuleCall_9 = (RuleCall)cGroup.eContents().get(9);
		private final Group cGroup_10 = (Group)cGroup.eContents().get(10);
		private final Keyword cElseKeyword_10_0 = (Keyword)cGroup_10.eContents().get(0);
		private final RuleCall cLCURLYTerminalRuleCall_10_1 = (RuleCall)cGroup_10.eContents().get(1);
		private final Assignment cElseAssignment_10_2 = (Assignment)cGroup_10.eContents().get(2);
		private final RuleCall cElseChoreographyParserRuleCall_10_2_0 = (RuleCall)cElseAssignment_10_2.eContents().get(0);
		private final RuleCall cRCURLYTerminalRuleCall_10_3 = (RuleCall)cGroup_10.eContents().get(3);
		
		/// **
		// * if (condition)@thread { Choreography } else { Choreography }
		// * / IfThenElse:
		//	(key=ID COLON)? "if" LPAREN condition=Condition RPAREN AT thread=ID LCURLY then=Choreography RCURLY ("else" LCURLY
		//	else=Choreography RCURLY)?;
		public ParserRule getRule() { return rule; }

		//(key=ID COLON)? "if" LPAREN condition=Condition RPAREN AT thread=ID LCURLY then=Choreography RCURLY ("else" LCURLY
		//else=Choreography RCURLY)?
		public Group getGroup() { return cGroup; }

		//(key=ID COLON)?
		public Group getGroup_0() { return cGroup_0; }

		//key=ID
		public Assignment getKeyAssignment_0_0() { return cKeyAssignment_0_0; }

		//ID
		public RuleCall getKeyIDTerminalRuleCall_0_0_0() { return cKeyIDTerminalRuleCall_0_0_0; }

		//COLON
		public RuleCall getCOLONTerminalRuleCall_0_1() { return cCOLONTerminalRuleCall_0_1; }

		//"if"
		public Keyword getIfKeyword_1() { return cIfKeyword_1; }

		//LPAREN
		public RuleCall getLPARENTerminalRuleCall_2() { return cLPARENTerminalRuleCall_2; }

		//condition=Condition
		public Assignment getConditionAssignment_3() { return cConditionAssignment_3; }

		//Condition
		public RuleCall getConditionConditionParserRuleCall_3_0() { return cConditionConditionParserRuleCall_3_0; }

		//RPAREN
		public RuleCall getRPARENTerminalRuleCall_4() { return cRPARENTerminalRuleCall_4; }

		//AT
		public RuleCall getATTerminalRuleCall_5() { return cATTerminalRuleCall_5; }

		//thread=ID
		public Assignment getThreadAssignment_6() { return cThreadAssignment_6; }

		//ID
		public RuleCall getThreadIDTerminalRuleCall_6_0() { return cThreadIDTerminalRuleCall_6_0; }

		//LCURLY
		public RuleCall getLCURLYTerminalRuleCall_7() { return cLCURLYTerminalRuleCall_7; }

		//then=Choreography
		public Assignment getThenAssignment_8() { return cThenAssignment_8; }

		//Choreography
		public RuleCall getThenChoreographyParserRuleCall_8_0() { return cThenChoreographyParserRuleCall_8_0; }

		//RCURLY
		public RuleCall getRCURLYTerminalRuleCall_9() { return cRCURLYTerminalRuleCall_9; }

		//("else" LCURLY else=Choreography RCURLY)?
		public Group getGroup_10() { return cGroup_10; }

		//"else"
		public Keyword getElseKeyword_10_0() { return cElseKeyword_10_0; }

		//LCURLY
		public RuleCall getLCURLYTerminalRuleCall_10_1() { return cLCURLYTerminalRuleCall_10_1; }

		//else=Choreography
		public Assignment getElseAssignment_10_2() { return cElseAssignment_10_2; }

		//Choreography
		public RuleCall getElseChoreographyParserRuleCall_10_2_0() { return cElseChoreographyParserRuleCall_10_2_0; }

		//RCURLY
		public RuleCall getRCURLYTerminalRuleCall_10_3() { return cRCURLYTerminalRuleCall_10_3; }
	}

	public class WhileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "While");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhileKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cLPARENTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cConditionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConditionConditionParserRuleCall_2_0 = (RuleCall)cConditionAssignment_2.eContents().get(0);
		private final RuleCall cRPARENTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final RuleCall cATTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Assignment cThreadAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cThreadIDTerminalRuleCall_5_0 = (RuleCall)cThreadAssignment_5.eContents().get(0);
		private final RuleCall cLCURLYTerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		private final Assignment cChoreographyAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cChoreographyChoreographyParserRuleCall_7_0 = (RuleCall)cChoreographyAssignment_7.eContents().get(0);
		private final RuleCall cRCURLYTerminalRuleCall_8 = (RuleCall)cGroup.eContents().get(8);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final RuleCall cLCURLYTerminalRuleCall_9_0 = (RuleCall)cGroup_9.eContents().get(0);
		private final Assignment cKeyAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final RuleCall cKeyIDTerminalRuleCall_9_1_0 = (RuleCall)cKeyAssignment_9_1.eContents().get(0);
		private final RuleCall cRCURLYTerminalRuleCall_9_2 = (RuleCall)cGroup_9.eContents().get(2);
		
		/// *
		// * while (condition)@thread { Choreography }
		// * / While:
		//	"while" LPAREN condition=Condition RPAREN AT thread=ID LCURLY choreography=Choreography RCURLY (LCURLY key=ID
		//	RCURLY)?;
		public ParserRule getRule() { return rule; }

		//"while" LPAREN condition=Condition RPAREN AT thread=ID LCURLY choreography=Choreography RCURLY (LCURLY key=ID RCURLY)?
		public Group getGroup() { return cGroup; }

		//"while"
		public Keyword getWhileKeyword_0() { return cWhileKeyword_0; }

		//LPAREN
		public RuleCall getLPARENTerminalRuleCall_1() { return cLPARENTerminalRuleCall_1; }

		//condition=Condition
		public Assignment getConditionAssignment_2() { return cConditionAssignment_2; }

		//Condition
		public RuleCall getConditionConditionParserRuleCall_2_0() { return cConditionConditionParserRuleCall_2_0; }

		//RPAREN
		public RuleCall getRPARENTerminalRuleCall_3() { return cRPARENTerminalRuleCall_3; }

		//AT
		public RuleCall getATTerminalRuleCall_4() { return cATTerminalRuleCall_4; }

		//thread=ID
		public Assignment getThreadAssignment_5() { return cThreadAssignment_5; }

		//ID
		public RuleCall getThreadIDTerminalRuleCall_5_0() { return cThreadIDTerminalRuleCall_5_0; }

		//LCURLY
		public RuleCall getLCURLYTerminalRuleCall_6() { return cLCURLYTerminalRuleCall_6; }

		//choreography=Choreography
		public Assignment getChoreographyAssignment_7() { return cChoreographyAssignment_7; }

		//Choreography
		public RuleCall getChoreographyChoreographyParserRuleCall_7_0() { return cChoreographyChoreographyParserRuleCall_7_0; }

		//RCURLY
		public RuleCall getRCURLYTerminalRuleCall_8() { return cRCURLYTerminalRuleCall_8; }

		//(LCURLY key=ID RCURLY)?
		public Group getGroup_9() { return cGroup_9; }

		//LCURLY
		public RuleCall getLCURLYTerminalRuleCall_9_0() { return cLCURLYTerminalRuleCall_9_0; }

		//key=ID
		public Assignment getKeyAssignment_9_1() { return cKeyAssignment_9_1; }

		//ID
		public RuleCall getKeyIDTerminalRuleCall_9_1_0() { return cKeyIDTerminalRuleCall_9_1_0; }

		//RCURLY
		public RuleCall getRCURLYTerminalRuleCall_9_2() { return cRCURLYTerminalRuleCall_9_2; }
	}

	public class ScopeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Scope");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cScopeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cATTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cThreadAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cThreadIDTerminalRuleCall_2_0 = (RuleCall)cThreadAssignment_2.eContents().get(0);
		private final RuleCall cLCURLYTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Assignment cChoreographyAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cChoreographyChoreographyParserRuleCall_4_0 = (RuleCall)cChoreographyAssignment_4.eContents().get(0);
		private final RuleCall cRCURLYTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cPropKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final RuleCall cLCURLYTerminalRuleCall_6_1 = (RuleCall)cGroup_6.eContents().get(1);
		private final Assignment cPropertiesAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cPropertiesAssignmentSetParserRuleCall_6_2_0 = (RuleCall)cPropertiesAssignment_6_2.eContents().get(0);
		private final RuleCall cRCURLYTerminalRuleCall_6_3 = (RuleCall)cGroup_6.eContents().get(3);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cRolesKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final RuleCall cLCURLYTerminalRuleCall_7_1 = (RuleCall)cGroup_7.eContents().get(1);
		private final Assignment cRolesAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final RuleCall cRolesRolesParserRuleCall_7_2_0 = (RuleCall)cRolesAssignment_7_2.eContents().get(0);
		private final RuleCall cRCURLYTerminalRuleCall_7_3 = (RuleCall)cGroup_7.eContents().get(3);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final RuleCall cLCURLYTerminalRuleCall_8_0 = (RuleCall)cGroup_8.eContents().get(0);
		private final Assignment cKeyAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cKeyIDTerminalRuleCall_8_1_0 = (RuleCall)cKeyAssignment_8_1.eContents().get(0);
		private final RuleCall cRCURLYTerminalRuleCall_8_2 = (RuleCall)cGroup_8.eContents().get(2);
		
		////Scope code
		//Scope:
		//	"scope" AT thread=ID LCURLY choreography=Choreography RCURLY ("prop" LCURLY properties=AssignmentSet RCURLY)? ("roles"
		//	LCURLY roles=Roles RCURLY)? (LCURLY key=ID RCURLY)?;
		public ParserRule getRule() { return rule; }

		//"scope" AT thread=ID LCURLY choreography=Choreography RCURLY ("prop" LCURLY properties=AssignmentSet RCURLY)? ("roles"
		//LCURLY roles=Roles RCURLY)? (LCURLY key=ID RCURLY)?
		public Group getGroup() { return cGroup; }

		//"scope"
		public Keyword getScopeKeyword_0() { return cScopeKeyword_0; }

		//AT
		public RuleCall getATTerminalRuleCall_1() { return cATTerminalRuleCall_1; }

		//thread=ID
		public Assignment getThreadAssignment_2() { return cThreadAssignment_2; }

		//ID
		public RuleCall getThreadIDTerminalRuleCall_2_0() { return cThreadIDTerminalRuleCall_2_0; }

		//LCURLY
		public RuleCall getLCURLYTerminalRuleCall_3() { return cLCURLYTerminalRuleCall_3; }

		//choreography=Choreography
		public Assignment getChoreographyAssignment_4() { return cChoreographyAssignment_4; }

		//Choreography
		public RuleCall getChoreographyChoreographyParserRuleCall_4_0() { return cChoreographyChoreographyParserRuleCall_4_0; }

		//RCURLY
		public RuleCall getRCURLYTerminalRuleCall_5() { return cRCURLYTerminalRuleCall_5; }

		//("prop" LCURLY properties=AssignmentSet RCURLY)?
		public Group getGroup_6() { return cGroup_6; }

		//"prop"
		public Keyword getPropKeyword_6_0() { return cPropKeyword_6_0; }

		//LCURLY
		public RuleCall getLCURLYTerminalRuleCall_6_1() { return cLCURLYTerminalRuleCall_6_1; }

		//properties=AssignmentSet
		public Assignment getPropertiesAssignment_6_2() { return cPropertiesAssignment_6_2; }

		//AssignmentSet
		public RuleCall getPropertiesAssignmentSetParserRuleCall_6_2_0() { return cPropertiesAssignmentSetParserRuleCall_6_2_0; }

		//RCURLY
		public RuleCall getRCURLYTerminalRuleCall_6_3() { return cRCURLYTerminalRuleCall_6_3; }

		//("roles" LCURLY roles=Roles RCURLY)?
		public Group getGroup_7() { return cGroup_7; }

		//"roles"
		public Keyword getRolesKeyword_7_0() { return cRolesKeyword_7_0; }

		//LCURLY
		public RuleCall getLCURLYTerminalRuleCall_7_1() { return cLCURLYTerminalRuleCall_7_1; }

		//roles=Roles
		public Assignment getRolesAssignment_7_2() { return cRolesAssignment_7_2; }

		//Roles
		public RuleCall getRolesRolesParserRuleCall_7_2_0() { return cRolesRolesParserRuleCall_7_2_0; }

		//RCURLY
		public RuleCall getRCURLYTerminalRuleCall_7_3() { return cRCURLYTerminalRuleCall_7_3; }

		//(LCURLY key=ID RCURLY)?
		public Group getGroup_8() { return cGroup_8; }

		//LCURLY
		public RuleCall getLCURLYTerminalRuleCall_8_0() { return cLCURLYTerminalRuleCall_8_0; }

		//key=ID
		public Assignment getKeyAssignment_8_1() { return cKeyAssignment_8_1; }

		//ID
		public RuleCall getKeyIDTerminalRuleCall_8_1_0() { return cKeyIDTerminalRuleCall_8_1_0; }

		//RCURLY
		public RuleCall getRCURLYTerminalRuleCall_8_2() { return cRCURLYTerminalRuleCall_8_2; }
	}

	public class RolesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Roles");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRolesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cRolesIDTerminalRuleCall_0_0 = (RuleCall)cRolesAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cCOMMATerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cRolesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRolesIDTerminalRuleCall_1_1_0 = (RuleCall)cRolesAssignment_1_1.eContents().get(0);
		
		//Roles:
		//	roles+=ID (COMMA roles+=ID)*;
		public ParserRule getRule() { return rule; }

		//roles+=ID (COMMA roles+=ID)*
		public Group getGroup() { return cGroup; }

		//roles+=ID
		public Assignment getRolesAssignment_0() { return cRolesAssignment_0; }

		//ID
		public RuleCall getRolesIDTerminalRuleCall_0_0() { return cRolesIDTerminalRuleCall_0_0; }

		//(COMMA roles+=ID)*
		public Group getGroup_1() { return cGroup_1; }

		//COMMA
		public RuleCall getCOMMATerminalRuleCall_1_0() { return cCOMMATerminalRuleCall_1_0; }

		//roles+=ID
		public Assignment getRolesAssignment_1_1() { return cRolesAssignment_1_1; }

		//ID
		public RuleCall getRolesIDTerminalRuleCall_1_1_0() { return cRolesIDTerminalRuleCall_1_1_0; }
	}

	public class NestedChoreographyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NestedChoreography");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLCURLYTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cChoreographyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cChoreographyChoreographyParserRuleCall_1_0 = (RuleCall)cChoreographyAssignment_1.eContents().get(0);
		private final RuleCall cRCURLYTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		////nested Choreography code
		//NestedChoreography:
		//	LCURLY choreography=Choreography RCURLY;
		public ParserRule getRule() { return rule; }

		//LCURLY choreography=Choreography RCURLY
		public Group getGroup() { return cGroup; }

		//LCURLY
		public RuleCall getLCURLYTerminalRuleCall_0() { return cLCURLYTerminalRuleCall_0; }

		//choreography=Choreography
		public Assignment getChoreographyAssignment_1() { return cChoreographyAssignment_1; }

		//Choreography
		public RuleCall getChoreographyChoreographyParserRuleCall_1_0() { return cChoreographyChoreographyParserRuleCall_1_0; }

		//RCURLY
		public RuleCall getRCURLYTerminalRuleCall_2() { return cRCURLYTerminalRuleCall_2; }
	}

	public class AssignmentSetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AssignmentSet");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAssignmentAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAssignmentAssignmentParserRuleCall_0_0 = (RuleCall)cAssignmentAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cCOMMATerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cContinuationAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cContinuationAssignmentSetParserRuleCall_1_1_0 = (RuleCall)cContinuationAssignment_1_1.eContents().get(0);
		
		/// *** Assignment *** / AssignmentSet:
		//	assignment=Assignment (COMMA continuation=AssignmentSet)?;
		public ParserRule getRule() { return rule; }

		//assignment=Assignment (COMMA continuation=AssignmentSet)?
		public Group getGroup() { return cGroup; }

		//assignment=Assignment
		public Assignment getAssignmentAssignment_0() { return cAssignmentAssignment_0; }

		//Assignment
		public RuleCall getAssignmentAssignmentParserRuleCall_0_0() { return cAssignmentAssignmentParserRuleCall_0_0; }

		//(COMMA continuation=AssignmentSet)?
		public Group getGroup_1() { return cGroup_1; }

		//COMMA
		public RuleCall getCOMMATerminalRuleCall_1_0() { return cCOMMATerminalRuleCall_1_0; }

		//continuation=AssignmentSet
		public Assignment getContinuationAssignment_1_1() { return cContinuationAssignment_1_1; }

		//AssignmentSet
		public RuleCall getContinuationAssignmentSetParserRuleCall_1_1_0() { return cContinuationAssignmentSetParserRuleCall_1_1_0; }
	}

	public class AssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Assignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVariableAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVariableIDTerminalRuleCall_1_0 = (RuleCall)cVariableAssignment_1.eContents().get(0);
		private final RuleCall cASSIGNTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpressionExpressionParserRuleCall_3_0 = (RuleCall)cExpressionAssignment_3.eContents().get(0);
		
		//Assignment:
		//	"N." variable=ID ASSIGN expression=Expression;
		public ParserRule getRule() { return rule; }

		//"N." variable=ID ASSIGN expression=Expression
		public Group getGroup() { return cGroup; }

		//"N."
		public Keyword getNKeyword_0() { return cNKeyword_0; }

		//variable=ID
		public Assignment getVariableAssignment_1() { return cVariableAssignment_1; }

		//ID
		public RuleCall getVariableIDTerminalRuleCall_1_0() { return cVariableIDTerminalRuleCall_1_0; }

		//ASSIGN
		public RuleCall getASSIGNTerminalRuleCall_2() { return cASSIGNTerminalRuleCall_2; }

		//expression=Expression
		public Assignment getExpressionAssignment_3() { return cExpressionAssignment_3; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_3_0() { return cExpressionExpressionParserRuleCall_3_0; }
	}

	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression");
		private final Assignment cSumExpressionAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cSumExpressionSumExpressionParserRuleCall_0 = (RuleCall)cSumExpressionAssignment.eContents().get(0);
		
		/// *** Expressions and conditions *** / Expression:
		//	sumExpression=SumExpression;
		public ParserRule getRule() { return rule; }

		//sumExpression=SumExpression
		public Assignment getSumExpressionAssignment() { return cSumExpressionAssignment; }

		//SumExpression
		public RuleCall getSumExpressionSumExpressionParserRuleCall_0() { return cSumExpressionSumExpressionParserRuleCall_0; }
	}

	public class SumExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SumExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cChildrenAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cChildrenExpressionBasicTermParserRuleCall_0_0 = (RuleCall)cChildrenAssignment_0.eContents().get(0);
		private final Assignment cChildrenAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cChildrenSumExpressionTermParserRuleCall_1_0 = (RuleCall)cChildrenAssignment_1.eContents().get(0);
		
		//SumExpression:
		//	children+=ExpressionBasicTerm children+=SumExpressionTerm*;
		public ParserRule getRule() { return rule; }

		//children+=ExpressionBasicTerm children+=SumExpressionTerm*
		public Group getGroup() { return cGroup; }

		//children+=ExpressionBasicTerm
		public Assignment getChildrenAssignment_0() { return cChildrenAssignment_0; }

		//ExpressionBasicTerm
		public RuleCall getChildrenExpressionBasicTermParserRuleCall_0_0() { return cChildrenExpressionBasicTermParserRuleCall_0_0; }

		//children+=SumExpressionTerm*
		public Assignment getChildrenAssignment_1() { return cChildrenAssignment_1; }

		//SumExpressionTerm
		public RuleCall getChildrenSumExpressionTermParserRuleCall_1_0() { return cChildrenSumExpressionTermParserRuleCall_1_0; }
	}

	public class SumExpressionTermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SumExpressionTerm");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cSumExpressionAddTermAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final RuleCall cPLUSTerminalRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Assignment cExpressionAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cExpressionExpressionBasicTermParserRuleCall_0_2_0 = (RuleCall)cExpressionAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cSumExpressionSubtractTermAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final RuleCall cMINUSTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Assignment cExpressionAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cExpressionExpressionBasicTermParserRuleCall_1_2_0 = (RuleCall)cExpressionAssignment_1_2.eContents().get(0);
		
		//SumExpressionTerm:
		//	{SumExpressionAddTerm} PLUS expression=ExpressionBasicTerm | {SumExpressionSubtractTerm} MINUS
		//	expression=ExpressionBasicTerm;
		public ParserRule getRule() { return rule; }

		//{SumExpressionAddTerm} PLUS expression=ExpressionBasicTerm | {SumExpressionSubtractTerm} MINUS
		//expression=ExpressionBasicTerm
		public Alternatives getAlternatives() { return cAlternatives; }

		//{SumExpressionAddTerm} PLUS expression=ExpressionBasicTerm
		public Group getGroup_0() { return cGroup_0; }

		//{SumExpressionAddTerm}
		public Action getSumExpressionAddTermAction_0_0() { return cSumExpressionAddTermAction_0_0; }

		//PLUS
		public RuleCall getPLUSTerminalRuleCall_0_1() { return cPLUSTerminalRuleCall_0_1; }

		//expression=ExpressionBasicTerm
		public Assignment getExpressionAssignment_0_2() { return cExpressionAssignment_0_2; }

		//ExpressionBasicTerm
		public RuleCall getExpressionExpressionBasicTermParserRuleCall_0_2_0() { return cExpressionExpressionBasicTermParserRuleCall_0_2_0; }

		//{SumExpressionSubtractTerm} MINUS expression=ExpressionBasicTerm
		public Group getGroup_1() { return cGroup_1; }

		//{SumExpressionSubtractTerm}
		public Action getSumExpressionSubtractTermAction_1_0() { return cSumExpressionSubtractTermAction_1_0; }

		//MINUS
		public RuleCall getMINUSTerminalRuleCall_1_1() { return cMINUSTerminalRuleCall_1_1; }

		//expression=ExpressionBasicTerm
		public Assignment getExpressionAssignment_1_2() { return cExpressionAssignment_1_2; }

		//ExpressionBasicTerm
		public RuleCall getExpressionExpressionBasicTermParserRuleCall_1_2_0() { return cExpressionExpressionBasicTermParserRuleCall_1_2_0; }
	}

	public class ExpressionBasicTermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExpressionBasicTerm");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cVariableAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cVariableIDTerminalRuleCall_0_0 = (RuleCall)cVariableAssignment_0.eContents().get(0);
		private final Assignment cConstantAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cConstantConstantParserRuleCall_1_0 = (RuleCall)cConstantAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final RuleCall cLPARENTerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Assignment cExpressionAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_2_1_0 = (RuleCall)cExpressionAssignment_2_1.eContents().get(0);
		private final RuleCall cRPARENTerminalRuleCall_2_2 = (RuleCall)cGroup_2.eContents().get(2);
		
		//ExpressionBasicTerm:
		//	variable=ID | constant=Constant | LPAREN expression=Expression RPAREN;
		public ParserRule getRule() { return rule; }

		//variable=ID | constant=Constant | LPAREN expression=Expression RPAREN
		public Alternatives getAlternatives() { return cAlternatives; }

		//variable=ID
		public Assignment getVariableAssignment_0() { return cVariableAssignment_0; }

		//ID
		public RuleCall getVariableIDTerminalRuleCall_0_0() { return cVariableIDTerminalRuleCall_0_0; }

		//constant=Constant
		public Assignment getConstantAssignment_1() { return cConstantAssignment_1; }

		//Constant
		public RuleCall getConstantConstantParserRuleCall_1_0() { return cConstantConstantParserRuleCall_1_0; }

		//LPAREN expression=Expression RPAREN
		public Group getGroup_2() { return cGroup_2; }

		//LPAREN
		public RuleCall getLPARENTerminalRuleCall_2_0() { return cLPARENTerminalRuleCall_2_0; }

		//expression=Expression
		public Assignment getExpressionAssignment_2_1() { return cExpressionAssignment_2_1; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_1_0() { return cExpressionExpressionParserRuleCall_2_1_0; }

		//RPAREN
		public RuleCall getRPARENTerminalRuleCall_2_2() { return cRPARENTerminalRuleCall_2_2; }
	}

	public class FunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Function");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final RuleCall cLPARENTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cParamsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cParamsExpressionParserRuleCall_2_0_0 = (RuleCall)cParamsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final RuleCall cCOMMATerminalRuleCall_2_1_0 = (RuleCall)cGroup_2_1.eContents().get(0);
		private final Assignment cParamsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cParamsExpressionParserRuleCall_2_1_1_0 = (RuleCall)cParamsAssignment_2_1_1.eContents().get(0);
		private final RuleCall cRPARENTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//Function:
		//	name=ID LPAREN (params+=Expression (COMMA params+=Expression)*)? RPAREN;
		public ParserRule getRule() { return rule; }

		//name=ID LPAREN (params+=Expression (COMMA params+=Expression)*)? RPAREN
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//LPAREN
		public RuleCall getLPARENTerminalRuleCall_1() { return cLPARENTerminalRuleCall_1; }

		//(params+=Expression (COMMA params+=Expression)*)?
		public Group getGroup_2() { return cGroup_2; }

		//params+=Expression
		public Assignment getParamsAssignment_2_0() { return cParamsAssignment_2_0; }

		//Expression
		public RuleCall getParamsExpressionParserRuleCall_2_0_0() { return cParamsExpressionParserRuleCall_2_0_0; }

		//(COMMA params+=Expression)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//COMMA
		public RuleCall getCOMMATerminalRuleCall_2_1_0() { return cCOMMATerminalRuleCall_2_1_0; }

		//params+=Expression
		public Assignment getParamsAssignment_2_1_1() { return cParamsAssignment_2_1_1; }

		//Expression
		public RuleCall getParamsExpressionParserRuleCall_2_1_1_0() { return cParamsExpressionParserRuleCall_2_1_1_0; }

		//RPAREN
		public RuleCall getRPARENTerminalRuleCall_3() { return cRPARENTerminalRuleCall_3; }
	}

	public class ConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Constant");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cIntValueAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cIntValueINTTerminalRuleCall_0_0 = (RuleCall)cIntValueAssignment_0.eContents().get(0);
		private final Assignment cStrValueAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cStrValueSTRINGTerminalRuleCall_1_0 = (RuleCall)cStrValueAssignment_1.eContents().get(0);
		private final Assignment cTrueAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cTrueTRUETerminalRuleCall_2_0 = (RuleCall)cTrueAssignment_2.eContents().get(0);
		private final Assignment cFalseAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cFalseFALSETerminalRuleCall_3_0 = (RuleCall)cFalseAssignment_3.eContents().get(0);
		
		//Constant:
		//	intValue=INT | strValue=STRING | true=TRUE | false=FALSE;
		public ParserRule getRule() { return rule; }

		//intValue=INT | strValue=STRING | true=TRUE | false=FALSE
		public Alternatives getAlternatives() { return cAlternatives; }

		//intValue=INT
		public Assignment getIntValueAssignment_0() { return cIntValueAssignment_0; }

		//INT
		public RuleCall getIntValueINTTerminalRuleCall_0_0() { return cIntValueINTTerminalRuleCall_0_0; }

		//strValue=STRING
		public Assignment getStrValueAssignment_1() { return cStrValueAssignment_1; }

		//STRING
		public RuleCall getStrValueSTRINGTerminalRuleCall_1_0() { return cStrValueSTRINGTerminalRuleCall_1_0; }

		//true=TRUE
		public Assignment getTrueAssignment_2() { return cTrueAssignment_2; }

		//TRUE
		public RuleCall getTrueTRUETerminalRuleCall_2_0() { return cTrueTRUETerminalRuleCall_2_0; }

		//false=FALSE
		public Assignment getFalseAssignment_3() { return cFalseAssignment_3; }

		//FALSE
		public RuleCall getFalseFALSETerminalRuleCall_3_0() { return cFalseFALSETerminalRuleCall_3_0; }
	}

	public class ConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Condition");
		private final Assignment cCompareConditionAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cCompareConditionCompareConditionParserRuleCall_0 = (RuleCall)cCompareConditionAssignment.eContents().get(0);
		
		//// Condition. Example: x < 5 AND x != 3
		//Condition:
		//	compareCondition=CompareCondition;
		public ParserRule getRule() { return rule; }

		//compareCondition=CompareCondition
		public Assignment getCompareConditionAssignment() { return cCompareConditionAssignment; }

		//CompareCondition
		public RuleCall getCompareConditionCompareConditionParserRuleCall_0() { return cCompareConditionCompareConditionParserRuleCall_0; }
	}

	public class CompareConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CompareCondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final Assignment cLeftExpressionAssignment_0_0_0 = (Assignment)cGroup_0_0.eContents().get(0);
		private final RuleCall cLeftExpressionExpressionParserRuleCall_0_0_0_0 = (RuleCall)cLeftExpressionAssignment_0_0_0.eContents().get(0);
		private final Assignment cOperatorAssignment_0_0_1 = (Assignment)cGroup_0_0.eContents().get(1);
		private final RuleCall cOperatorConditionOperatorParserRuleCall_0_0_1_0 = (RuleCall)cOperatorAssignment_0_0_1.eContents().get(0);
		private final Assignment cRightExpressionAssignment_0_0_2 = (Assignment)cGroup_0_0.eContents().get(2);
		private final RuleCall cRightExpressionExpressionParserRuleCall_0_0_2_0 = (RuleCall)cRightExpressionAssignment_0_0_2.eContents().get(0);
		private final Assignment cTrueAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final RuleCall cTrueTRUETerminalRuleCall_0_1_0 = (RuleCall)cTrueAssignment_0_1.eContents().get(0);
		private final Assignment cFalseAssignment_0_2 = (Assignment)cAlternatives_0.eContents().get(2);
		private final RuleCall cFalseFALSETerminalRuleCall_0_2_0 = (RuleCall)cFalseAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Assignment cAndAssignment_1_0_0 = (Assignment)cAlternatives_1_0.eContents().get(0);
		private final RuleCall cAndANDTerminalRuleCall_1_0_0_0 = (RuleCall)cAndAssignment_1_0_0.eContents().get(0);
		private final Assignment cOrAssignment_1_0_1 = (Assignment)cAlternatives_1_0.eContents().get(1);
		private final RuleCall cOrORTerminalRuleCall_1_0_1_0 = (RuleCall)cOrAssignment_1_0_1.eContents().get(0);
		private final Assignment cNextAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNextCompareConditionParserRuleCall_1_1_0 = (RuleCall)cNextAssignment_1_1.eContents().get(0);
		
		//CompareCondition:
		//	(leftExpression=Expression operator=ConditionOperator rightExpression=Expression | true?=TRUE | false?=FALSE)
		//	((and?=AND | or?=OR) next=CompareCondition)?;
		public ParserRule getRule() { return rule; }

		//(leftExpression=Expression operator=ConditionOperator rightExpression=Expression | true?=TRUE | false?=FALSE) ((and?=AND
		//| or?=OR) next=CompareCondition)?
		public Group getGroup() { return cGroup; }

		//leftExpression=Expression operator=ConditionOperator rightExpression=Expression | true?=TRUE | false?=FALSE
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//leftExpression=Expression operator=ConditionOperator rightExpression=Expression
		public Group getGroup_0_0() { return cGroup_0_0; }

		//leftExpression=Expression
		public Assignment getLeftExpressionAssignment_0_0_0() { return cLeftExpressionAssignment_0_0_0; }

		//Expression
		public RuleCall getLeftExpressionExpressionParserRuleCall_0_0_0_0() { return cLeftExpressionExpressionParserRuleCall_0_0_0_0; }

		//operator=ConditionOperator
		public Assignment getOperatorAssignment_0_0_1() { return cOperatorAssignment_0_0_1; }

		//ConditionOperator
		public RuleCall getOperatorConditionOperatorParserRuleCall_0_0_1_0() { return cOperatorConditionOperatorParserRuleCall_0_0_1_0; }

		//rightExpression=Expression
		public Assignment getRightExpressionAssignment_0_0_2() { return cRightExpressionAssignment_0_0_2; }

		//Expression
		public RuleCall getRightExpressionExpressionParserRuleCall_0_0_2_0() { return cRightExpressionExpressionParserRuleCall_0_0_2_0; }

		//true?=TRUE
		public Assignment getTrueAssignment_0_1() { return cTrueAssignment_0_1; }

		//TRUE
		public RuleCall getTrueTRUETerminalRuleCall_0_1_0() { return cTrueTRUETerminalRuleCall_0_1_0; }

		//false?=FALSE
		public Assignment getFalseAssignment_0_2() { return cFalseAssignment_0_2; }

		//FALSE
		public RuleCall getFalseFALSETerminalRuleCall_0_2_0() { return cFalseFALSETerminalRuleCall_0_2_0; }

		//((and?=AND | or?=OR) next=CompareCondition)?
		public Group getGroup_1() { return cGroup_1; }

		//and?=AND | or?=OR
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//and?=AND
		public Assignment getAndAssignment_1_0_0() { return cAndAssignment_1_0_0; }

		//AND
		public RuleCall getAndANDTerminalRuleCall_1_0_0_0() { return cAndANDTerminalRuleCall_1_0_0_0; }

		//or?=OR
		public Assignment getOrAssignment_1_0_1() { return cOrAssignment_1_0_1; }

		//OR
		public RuleCall getOrORTerminalRuleCall_1_0_1_0() { return cOrORTerminalRuleCall_1_0_1_0; }

		//next=CompareCondition
		public Assignment getNextAssignment_1_1() { return cNextAssignment_1_1; }

		//CompareCondition
		public RuleCall getNextCompareConditionParserRuleCall_1_1_0() { return cNextCompareConditionParserRuleCall_1_1_0; }
	}

	public class ConditionOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConditionOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cLessAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cLessLESSTerminalRuleCall_0_0 = (RuleCall)cLessAssignment_0.eContents().get(0);
		private final Assignment cEqualAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cEqualEQUALTerminalRuleCall_1_0 = (RuleCall)cEqualAssignment_1.eContents().get(0);
		private final Assignment cGreaterAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cGreaterGREATERTerminalRuleCall_2_0 = (RuleCall)cGreaterAssignment_2.eContents().get(0);
		private final Assignment cNot_equalAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cNot_equalNOT_EQUALTerminalRuleCall_3_0 = (RuleCall)cNot_equalAssignment_3.eContents().get(0);
		
		//ConditionOperator:
		//	less?=LESS | equal?=EQUAL | greater?=GREATER | not_equal?=NOT_EQUAL;
		public ParserRule getRule() { return rule; }

		//less?=LESS | equal?=EQUAL | greater?=GREATER | not_equal?=NOT_EQUAL
		public Alternatives getAlternatives() { return cAlternatives; }

		//less?=LESS
		public Assignment getLessAssignment_0() { return cLessAssignment_0; }

		//LESS
		public RuleCall getLessLESSTerminalRuleCall_0_0() { return cLessLESSTerminalRuleCall_0_0; }

		//equal?=EQUAL
		public Assignment getEqualAssignment_1() { return cEqualAssignment_1; }

		//EQUAL
		public RuleCall getEqualEQUALTerminalRuleCall_1_0() { return cEqualEQUALTerminalRuleCall_1_0; }

		//greater?=GREATER
		public Assignment getGreaterAssignment_2() { return cGreaterAssignment_2; }

		//GREATER
		public RuleCall getGreaterGREATERTerminalRuleCall_2_0() { return cGreaterGREATERTerminalRuleCall_2_0; }

		//not_equal?=NOT_EQUAL
		public Assignment getNot_equalAssignment_3() { return cNot_equalAssignment_3; }

		//NOT_EQUAL
		public RuleCall getNot_equalNOT_EQUALTerminalRuleCall_3_0() { return cNot_equalNOT_EQUALTerminalRuleCall_3_0; }
	}
	
	
	private AiocJElements pAiocJ;
	private AiocElements pAioc;
	private RuleElements pRule;
	private WhereElements pWhere;
	private WhereExpressionBasicTermElements pWhereExpressionBasicTerm;
	private WhereCompareConditionElements pWhereCompareCondition;
	private WhereLogicOpElements pWhereLogicOp;
	private PreambleElements pPreamble;
	private FunctionLocationElements pFunctionLocation;
	private FunctionListElements pFunctionList;
	private LocationDefinitionElements pLocationDefinition;
	private ChoreographyElements pChoreography;
	private SeqBlockElements pSeqBlock;
	private SkipElements pSkip;
	private InteractionElements pInteraction;
	private LocalCodeElements pLocalCode;
	private IfThenElseElements pIfThenElse;
	private WhileElements pWhile;
	private ScopeElements pScope;
	private RolesElements pRoles;
	private NestedChoreographyElements pNestedChoreography;
	private AssignmentSetElements pAssignmentSet;
	private AssignmentElements pAssignment;
	private ExpressionElements pExpression;
	private SumExpressionElements pSumExpression;
	private SumExpressionTermElements pSumExpressionTerm;
	private ExpressionBasicTermElements pExpressionBasicTerm;
	private FunctionElements pFunction;
	private ConstantElements pConstant;
	private ConditionElements pCondition;
	private CompareConditionElements pCompareCondition;
	private ConditionOperatorElements pConditionOperator;
	private TerminalRule tLCURLY;
	private TerminalRule tRCURLY;
	private TerminalRule tARROW;
	private TerminalRule tSEMICOLON;
	private TerminalRule tPIPE;
	private TerminalRule tCOLON;
	private TerminalRule tPLUS;
	private TerminalRule tMINUS;
	private TerminalRule tAT;
	private TerminalRule tASSIGN;
	private TerminalRule tDOT;
	private TerminalRule tLPAREN;
	private TerminalRule tRPAREN;
	private TerminalRule tCOMMA;
	private TerminalRule tLESS;
	private TerminalRule tEQUAL;
	private TerminalRule tGREATER;
	private TerminalRule tNOT_EQUAL;
	private TerminalRule tAND;
	private TerminalRule tOR;
	private TerminalRule tTRUE;
	private TerminalRule tFALSE;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public AiocGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.Aioc".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//AiocJ:
	//	aioc=Aioc | ruleSet+=Rule*;
	public AiocJElements getAiocJAccess() {
		return (pAiocJ != null) ? pAiocJ : (pAiocJ = new AiocJElements());
	}
	
	public ParserRule getAiocJRule() {
		return getAiocJAccess().getRule();
	}

	//Aioc:
	//	functionLocation+=FunctionLocation* "preamble" LCURLY preamble=Preamble RCURLY "aioc" LCURLY choreography=Choreography
	//	RCURLY;
	public AiocElements getAiocAccess() {
		return (pAioc != null) ? pAioc : (pAioc = new AiocElements());
	}
	
	public ParserRule getAiocRule() {
		return getAiocAccess().getRule();
	}

	//Rule:
	//	"rule" LCURLY functionLocation+=FunctionLocation* "on" LCURLY where=Where RCURLY "do" LCURLY choreography=Choreography
	//	RCURLY RCURLY;
	public RuleElements getRuleAccess() {
		return (pRule != null) ? pRule : (pRule = new RuleElements());
	}
	
	public ParserRule getRuleRule() {
		return getRuleAccess().getRule();
	}

	//Where:
	//	whereCondition=WhereCompareCondition;
	public WhereElements getWhereAccess() {
		return (pWhere != null) ? pWhere : (pWhere = new WhereElements());
	}
	
	public ParserRule getWhereRule() {
		return getWhereAccess().getRule();
	}

	//WhereExpressionBasicTerm:
	//	"N." nVariable=ID | "E." eVariable=ID | sVariable=ID;
	public WhereExpressionBasicTermElements getWhereExpressionBasicTermAccess() {
		return (pWhereExpressionBasicTerm != null) ? pWhereExpressionBasicTerm : (pWhereExpressionBasicTerm = new WhereExpressionBasicTermElements());
	}
	
	public ParserRule getWhereExpressionBasicTermRule() {
		return getWhereExpressionBasicTermAccess().getRule();
	}

	//WhereCompareCondition:
	//	(leftExpression=WhereExpressionBasicTerm operator=ConditionOperator rightExpression=Expression | true?=TRUE |
	//	false?=FALSE) (logicOp=WhereLogicOp continuation=WhereCompareCondition)?;
	public WhereCompareConditionElements getWhereCompareConditionAccess() {
		return (pWhereCompareCondition != null) ? pWhereCompareCondition : (pWhereCompareCondition = new WhereCompareConditionElements());
	}
	
	public ParserRule getWhereCompareConditionRule() {
		return getWhereCompareConditionAccess().getRule();
	}

	//WhereLogicOp:
	//	and?=AND | or?=OR;
	public WhereLogicOpElements getWhereLogicOpAccess() {
		return (pWhereLogicOp != null) ? pWhereLogicOp : (pWhereLogicOp = new WhereLogicOpElements());
	}
	
	public ParserRule getWhereLogicOpRule() {
		return getWhereLogicOpAccess().getRule();
	}

	//Preamble:
	//	"starter:" starter=ID locDefinition=LocationDefinition?;
	public PreambleElements getPreambleAccess() {
		return (pPreamble != null) ? pPreamble : (pPreamble = new PreambleElements());
	}
	
	public ParserRule getPreambleRule() {
		return getPreambleAccess().getRule();
	}

	//FunctionLocation:
	//	"include" functions=FunctionList "from" location=STRING ("with" protocol=STRING)?;
	public FunctionLocationElements getFunctionLocationAccess() {
		return (pFunctionLocation != null) ? pFunctionLocation : (pFunctionLocation = new FunctionLocationElements());
	}
	
	public ParserRule getFunctionLocationRule() {
		return getFunctionLocationAccess().getRule();
	}

	//FunctionList:
	//	functionName+=ID (COMMA functionName+=ID)*;
	public FunctionListElements getFunctionListAccess() {
		return (pFunctionList != null) ? pFunctionList : (pFunctionList = new FunctionListElements());
	}
	
	public ParserRule getFunctionListRule() {
		return getFunctionListAccess().getRule();
	}

	//LocationDefinition:
	//	"location" AT role=ID COLON location=STRING continuation=LocationDefinition?;
	public LocationDefinitionElements getLocationDefinitionAccess() {
		return (pLocationDefinition != null) ? pLocationDefinition : (pLocationDefinition = new LocationDefinitionElements());
	}
	
	public ParserRule getLocationDefinitionRule() {
		return getLocationDefinitionAccess().getRule();
	}

	//Choreography:
	//	seqBlock=SeqBlock (PIPE next=Choreography)?;
	public ChoreographyElements getChoreographyAccess() {
		return (pChoreography != null) ? pChoreography : (pChoreography = new ChoreographyElements());
	}
	
	public ParserRule getChoreographyRule() {
		return getChoreographyAccess().getRule();
	}

	//SeqBlock:
	//	event=(Skip | Interaction | LocalCode | IfThenElse | While | Scope | NestedChoreography) (SEMICOLON next=SeqBlock)?;
	public SeqBlockElements getSeqBlockAccess() {
		return (pSeqBlock != null) ? pSeqBlock : (pSeqBlock = new SeqBlockElements());
	}
	
	public ParserRule getSeqBlockRule() {
		return getSeqBlockAccess().getRule();
	}

	//Skip:
	//	skip?="skip";
	public SkipElements getSkipAccess() {
		return (pSkip != null) ? pSkip : (pSkip = new SkipElements());
	}
	
	public ParserRule getSkipRule() {
		return getSkipAccess().getRule();
	}

	//Interaction:
	//	operation=ID COLON sender=ID LPAREN senderExpression=ExpressionBasicTerm? RPAREN ARROW receiver=ID LPAREN
	//	receiverVariable=ID? RPAREN;
	public InteractionElements getInteractionAccess() {
		return (pInteraction != null) ? pInteraction : (pInteraction = new InteractionElements());
	}
	
	public ParserRule getInteractionRule() {
		return getInteractionAccess().getRule();
	}

	//// Local thread code
	//LocalCode: // Ask a question to the user, e.g. result@thr = getInput( question )
	//	{LocalAskCommand} resultVariable=ID AT thread=ID ASSIGN "getInput" LPAREN question=Expression RPAREN | // Show some text, e.g. show@thr("Hello, world!")
	//	{LocalShowCommand} variable=ID AT thread=ID ASSIGN "show" LPAREN expression=Expression RPAREN | // Make an internal state assignment var@thr = e
	//	{LocalAssignmentCommand} variable=ID AT thread=ID ASSIGN (expression=Expression | function=Function);
	public LocalCodeElements getLocalCodeAccess() {
		return (pLocalCode != null) ? pLocalCode : (pLocalCode = new LocalCodeElements());
	}
	
	public ParserRule getLocalCodeRule() {
		return getLocalCodeAccess().getRule();
	}

	/// **
	// * if (condition)@thread { Choreography } else { Choreography }
	// * / IfThenElse:
	//	(key=ID COLON)? "if" LPAREN condition=Condition RPAREN AT thread=ID LCURLY then=Choreography RCURLY ("else" LCURLY
	//	else=Choreography RCURLY)?;
	public IfThenElseElements getIfThenElseAccess() {
		return (pIfThenElse != null) ? pIfThenElse : (pIfThenElse = new IfThenElseElements());
	}
	
	public ParserRule getIfThenElseRule() {
		return getIfThenElseAccess().getRule();
	}

	/// *
	// * while (condition)@thread { Choreography }
	// * / While:
	//	"while" LPAREN condition=Condition RPAREN AT thread=ID LCURLY choreography=Choreography RCURLY (LCURLY key=ID
	//	RCURLY)?;
	public WhileElements getWhileAccess() {
		return (pWhile != null) ? pWhile : (pWhile = new WhileElements());
	}
	
	public ParserRule getWhileRule() {
		return getWhileAccess().getRule();
	}

	////Scope code
	//Scope:
	//	"scope" AT thread=ID LCURLY choreography=Choreography RCURLY ("prop" LCURLY properties=AssignmentSet RCURLY)? ("roles"
	//	LCURLY roles=Roles RCURLY)? (LCURLY key=ID RCURLY)?;
	public ScopeElements getScopeAccess() {
		return (pScope != null) ? pScope : (pScope = new ScopeElements());
	}
	
	public ParserRule getScopeRule() {
		return getScopeAccess().getRule();
	}

	//Roles:
	//	roles+=ID (COMMA roles+=ID)*;
	public RolesElements getRolesAccess() {
		return (pRoles != null) ? pRoles : (pRoles = new RolesElements());
	}
	
	public ParserRule getRolesRule() {
		return getRolesAccess().getRule();
	}

	////nested Choreography code
	//NestedChoreography:
	//	LCURLY choreography=Choreography RCURLY;
	public NestedChoreographyElements getNestedChoreographyAccess() {
		return (pNestedChoreography != null) ? pNestedChoreography : (pNestedChoreography = new NestedChoreographyElements());
	}
	
	public ParserRule getNestedChoreographyRule() {
		return getNestedChoreographyAccess().getRule();
	}

	/// *** Assignment *** / AssignmentSet:
	//	assignment=Assignment (COMMA continuation=AssignmentSet)?;
	public AssignmentSetElements getAssignmentSetAccess() {
		return (pAssignmentSet != null) ? pAssignmentSet : (pAssignmentSet = new AssignmentSetElements());
	}
	
	public ParserRule getAssignmentSetRule() {
		return getAssignmentSetAccess().getRule();
	}

	//Assignment:
	//	"N." variable=ID ASSIGN expression=Expression;
	public AssignmentElements getAssignmentAccess() {
		return (pAssignment != null) ? pAssignment : (pAssignment = new AssignmentElements());
	}
	
	public ParserRule getAssignmentRule() {
		return getAssignmentAccess().getRule();
	}

	/// *** Expressions and conditions *** / Expression:
	//	sumExpression=SumExpression;
	public ExpressionElements getExpressionAccess() {
		return (pExpression != null) ? pExpression : (pExpression = new ExpressionElements());
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//SumExpression:
	//	children+=ExpressionBasicTerm children+=SumExpressionTerm*;
	public SumExpressionElements getSumExpressionAccess() {
		return (pSumExpression != null) ? pSumExpression : (pSumExpression = new SumExpressionElements());
	}
	
	public ParserRule getSumExpressionRule() {
		return getSumExpressionAccess().getRule();
	}

	//SumExpressionTerm:
	//	{SumExpressionAddTerm} PLUS expression=ExpressionBasicTerm | {SumExpressionSubtractTerm} MINUS
	//	expression=ExpressionBasicTerm;
	public SumExpressionTermElements getSumExpressionTermAccess() {
		return (pSumExpressionTerm != null) ? pSumExpressionTerm : (pSumExpressionTerm = new SumExpressionTermElements());
	}
	
	public ParserRule getSumExpressionTermRule() {
		return getSumExpressionTermAccess().getRule();
	}

	//ExpressionBasicTerm:
	//	variable=ID | constant=Constant | LPAREN expression=Expression RPAREN;
	public ExpressionBasicTermElements getExpressionBasicTermAccess() {
		return (pExpressionBasicTerm != null) ? pExpressionBasicTerm : (pExpressionBasicTerm = new ExpressionBasicTermElements());
	}
	
	public ParserRule getExpressionBasicTermRule() {
		return getExpressionBasicTermAccess().getRule();
	}

	//Function:
	//	name=ID LPAREN (params+=Expression (COMMA params+=Expression)*)? RPAREN;
	public FunctionElements getFunctionAccess() {
		return (pFunction != null) ? pFunction : (pFunction = new FunctionElements());
	}
	
	public ParserRule getFunctionRule() {
		return getFunctionAccess().getRule();
	}

	//Constant:
	//	intValue=INT | strValue=STRING | true=TRUE | false=FALSE;
	public ConstantElements getConstantAccess() {
		return (pConstant != null) ? pConstant : (pConstant = new ConstantElements());
	}
	
	public ParserRule getConstantRule() {
		return getConstantAccess().getRule();
	}

	//// Condition. Example: x < 5 AND x != 3
	//Condition:
	//	compareCondition=CompareCondition;
	public ConditionElements getConditionAccess() {
		return (pCondition != null) ? pCondition : (pCondition = new ConditionElements());
	}
	
	public ParserRule getConditionRule() {
		return getConditionAccess().getRule();
	}

	//CompareCondition:
	//	(leftExpression=Expression operator=ConditionOperator rightExpression=Expression | true?=TRUE | false?=FALSE)
	//	((and?=AND | or?=OR) next=CompareCondition)?;
	public CompareConditionElements getCompareConditionAccess() {
		return (pCompareCondition != null) ? pCompareCondition : (pCompareCondition = new CompareConditionElements());
	}
	
	public ParserRule getCompareConditionRule() {
		return getCompareConditionAccess().getRule();
	}

	//ConditionOperator:
	//	less?=LESS | equal?=EQUAL | greater?=GREATER | not_equal?=NOT_EQUAL;
	public ConditionOperatorElements getConditionOperatorAccess() {
		return (pConditionOperator != null) ? pConditionOperator : (pConditionOperator = new ConditionOperatorElements());
	}
	
	public ParserRule getConditionOperatorRule() {
		return getConditionOperatorAccess().getRule();
	}

	//// Terminals
	//terminal LCURLY:
	//	"{";
	public TerminalRule getLCURLYRule() {
		return (tLCURLY != null) ? tLCURLY : (tLCURLY = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LCURLY"));
	} 

	//terminal RCURLY:
	//	"}";
	public TerminalRule getRCURLYRule() {
		return (tRCURLY != null) ? tRCURLY : (tRCURLY = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "RCURLY"));
	} 

	//terminal ARROW:
	//	"->";
	public TerminalRule getARROWRule() {
		return (tARROW != null) ? tARROW : (tARROW = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ARROW"));
	} 

	//terminal SEMICOLON:
	//	";";
	public TerminalRule getSEMICOLONRule() {
		return (tSEMICOLON != null) ? tSEMICOLON : (tSEMICOLON = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SEMICOLON"));
	} 

	//terminal PIPE:
	//	"|";
	public TerminalRule getPIPERule() {
		return (tPIPE != null) ? tPIPE : (tPIPE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "PIPE"));
	} 

	//terminal COLON:
	//	":";
	public TerminalRule getCOLONRule() {
		return (tCOLON != null) ? tCOLON : (tCOLON = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "COLON"));
	} 

	//terminal PLUS:
	//	"+";
	public TerminalRule getPLUSRule() {
		return (tPLUS != null) ? tPLUS : (tPLUS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "PLUS"));
	} 

	//terminal MINUS:
	//	"-";
	public TerminalRule getMINUSRule() {
		return (tMINUS != null) ? tMINUS : (tMINUS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "MINUS"));
	} 

	//terminal AT:
	//	"@";
	public TerminalRule getATRule() {
		return (tAT != null) ? tAT : (tAT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "AT"));
	} 

	//terminal ASSIGN:
	//	"=";
	public TerminalRule getASSIGNRule() {
		return (tASSIGN != null) ? tASSIGN : (tASSIGN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ASSIGN"));
	} 

	//terminal DOT:
	//	".";
	public TerminalRule getDOTRule() {
		return (tDOT != null) ? tDOT : (tDOT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DOT"));
	} 

	//terminal LPAREN:
	//	"(";
	public TerminalRule getLPARENRule() {
		return (tLPAREN != null) ? tLPAREN : (tLPAREN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LPAREN"));
	} 

	//terminal RPAREN:
	//	")";
	public TerminalRule getRPARENRule() {
		return (tRPAREN != null) ? tRPAREN : (tRPAREN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "RPAREN"));
	} 

	//terminal COMMA:
	//	",";
	public TerminalRule getCOMMARule() {
		return (tCOMMA != null) ? tCOMMA : (tCOMMA = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "COMMA"));
	} 

	//terminal LESS:
	//	"<";
	public TerminalRule getLESSRule() {
		return (tLESS != null) ? tLESS : (tLESS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LESS"));
	} 

	//terminal EQUAL:
	//	"==";
	public TerminalRule getEQUALRule() {
		return (tEQUAL != null) ? tEQUAL : (tEQUAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "EQUAL"));
	} 

	//terminal GREATER:
	//	">";
	public TerminalRule getGREATERRule() {
		return (tGREATER != null) ? tGREATER : (tGREATER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "GREATER"));
	} 

	//terminal NOT_EQUAL:
	//	"!=";
	public TerminalRule getNOT_EQUALRule() {
		return (tNOT_EQUAL != null) ? tNOT_EQUAL : (tNOT_EQUAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "NOT_EQUAL"));
	} 

	//terminal AND:
	//	"and";
	public TerminalRule getANDRule() {
		return (tAND != null) ? tAND : (tAND = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "AND"));
	} 

	//terminal OR:
	//	"or";
	public TerminalRule getORRule() {
		return (tOR != null) ? tOR : (tOR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "OR"));
	} 

	//terminal TRUE:
	//	"true";
	public TerminalRule getTRUERule() {
		return (tTRUE != null) ? tTRUE : (tTRUE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "TRUE"));
	} 

	//terminal FALSE:
	//	"false";
	public TerminalRule getFALSERule() {
		return (tFALSE != null) ? tFALSE : (tFALSE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "FALSE"));
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
