/***************************************************************************
 *   Copyright (C) 2013-2014 by Saverio Giallorenzo <sgiallor@cs.unibo.it> *
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU Library General Public License as       *
 *   published by the Free Software Foundation; either version 2 of the    *
 *   License, or (at your option) any later version.                       *
 *                                                                         *
 *   This program is distributed in the hope that it will be useful,       *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
 *   GNU General Public License for more details.                          *
 *                                                                         *
 *   You should have received a copy of the GNU Library General Public     *
 *   License along with this program; if not, write to the                 *
 *   Free Software Foundation, Inc.,                                       *
 *   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
 *                                                                         *
 *   For details about the authors of this software, see the AUTHORS file. *
 ***************************************************************************/

package org.epp.impl;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.Writer;
import java.util.Set;

import org.aioc.Aioc;

public class LaunchScripts {

	public void writeRulesLaunchScript( File targetDirectory ) throws IOException{
		String s = getInit();
		s += getAdaptationServerLaunchString();
		OutputStream ostream = new FileOutputStream( 
				targetDirectory.getAbsolutePath() + "/"+ File.separator + "rules_launcher.sh" );
		Writer fileWriter = new OutputStreamWriter( ostream );
		fileWriter.write( s );
		fileWriter.flush();
		ostream.close();
	}
	
	public void writeMidLaunchScript( File targetDirectory ) throws IOException{
		String s = getInit();
		s += getAdapationManagerLaunchString();
		s += getEnvironmentLaunchString();
		OutputStream ostream = new FileOutputStream( 
				targetDirectory.getAbsolutePath() + File.separator + "mid_launcher.sh" );
		Writer fileWriter = new OutputStreamWriter( ostream );
		fileWriter.write( s );
		fileWriter.flush();
		ostream.close();
	}
		
	public void writeAIOCLaunchScript( Aioc aioc, File targetDirectory ) throws IOException{
		NameCollector nc = new NameCollector();
		nc.collect( aioc.getChoreography(), null);
		
		String s = getInit();
		Set<String> ledRoles = nc.getRoles();
		ledRoles.remove( aioc.getPreamble().getStarter() );
		// adds the launcher for the starter
		s += getRoleLaunchString( aioc.getPreamble().getStarter() );
		s += "\n" + "read -p \"Launched the starter role, press [Enter] to continue...\"";
		// adds the launcher for led roles
		int remainingRoles = ledRoles.size();
		for( String role : ledRoles ){
			if( remainingRoles == 1 ){
				s += "\n" + "read -p \"Launching the last role, press [Enter] to start the choreography...\"";
			}
			s += getRoleLaunchString( role );
			remainingRoles--;
		}
		
		OutputStream ostream = new FileOutputStream( 
				targetDirectory.getAbsolutePath() + "/"+ File.separator + "aioc_launcher.sh" );
		Writer fileWriter = new OutputStreamWriter( ostream );
		fileWriter.write( s );
		fileWriter.flush();
		ostream.close();
	}
	
	private String getRoleLaunchString( String role ){
		return "\n" + role + "_launcher=\"cd $dir/" + role + "; jolie " + role + ".ol\"" +
				"\n" + "launcher \"$" + role + "_launcher\"";
	}
	
	private String getAdapationManagerLaunchString(){
		return "\n" + "adaptation_manager_launcher=\"cd $dir/adaptation_manager; jolie main_adaptationManager.ol\"" +
				"\n" + "launcher \"$adaptation_manager_launcher\"";
	}
	
	private String getEnvironmentLaunchString(){
		return "\n" + "environment_launcher=\"cd $dir/environment; jolie environment.ol\"" +
				"\n" + "launcher \"$environment_launcher\"";
	}
	
	private String getAdaptationServerLaunchString(){
		return "\n" + "adaptation_server_launcher=\"cd $dir/__adaptation_server/servers/server; jolie AdaptationServer.ol\"" +
				"\n" + "launcher \"$adaptation_server_launcher\"";
	}
	
	private String getInit(){
		return "#!/bin/bash" + "\n" +
				"launcher(){" + "\n" +
				"\t" + "if [ \"$(uname)\" == \"Darwin\" ]; then" + "\n" +
				"osascript <<END" + "\n" +
					"\t" + "tell application \"Terminal\"" + "\n" +
						"\t\t" + "do script \"$1\"" + "\n" +
						"\t" + "end tell" + "\n" +
				"END" + "\n" +
				"\t" + "else" + "\n" +
				"\t\t" + "xterm -hold -e \"$1\" &" + "\n" +
				"\t" + "fi" + "\n" +
				"}"+ "\n\n" + 
				"dir=$(cd `dirname \"${BASH_SOURCE[0]}\"` && pwd)";
		}
}