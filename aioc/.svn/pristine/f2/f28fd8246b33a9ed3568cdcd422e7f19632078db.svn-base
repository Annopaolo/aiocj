/**
 */
package org.aioc.impl;

import org.aioc.AiocPackage;
import org.aioc.ConditionOperator;
import org.aioc.Expression;
import org.aioc.WhereCompareCondition;
import org.aioc.WhereExpressionBasicTerm;
import org.aioc.WhereLogicOp;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Where Compare Condition</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * <ul>
 *   <li>{@link org.aioc.impl.WhereCompareConditionImpl#getLeftExpression <em>Left Expression</em>}</li>
 *   <li>{@link org.aioc.impl.WhereCompareConditionImpl#getOperator <em>Operator</em>}</li>
 *   <li>{@link org.aioc.impl.WhereCompareConditionImpl#getRightExpression <em>Right Expression</em>}</li>
 *   <li>{@link org.aioc.impl.WhereCompareConditionImpl#isTrue <em>True</em>}</li>
 *   <li>{@link org.aioc.impl.WhereCompareConditionImpl#isFalse <em>False</em>}</li>
 *   <li>{@link org.aioc.impl.WhereCompareConditionImpl#getLogicOp <em>Logic Op</em>}</li>
 *   <li>{@link org.aioc.impl.WhereCompareConditionImpl#getContinuation <em>Continuation</em>}</li>
 * </ul>
 * </p>
 *
 * @generated
 */
public class WhereCompareConditionImpl extends MinimalEObjectImpl.Container implements WhereCompareCondition
{
  /**
   * The cached value of the '{@link #getLeftExpression() <em>Left Expression</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLeftExpression()
   * @generated
   * @ordered
   */
  protected WhereExpressionBasicTerm leftExpression;

  /**
   * The cached value of the '{@link #getOperator() <em>Operator</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOperator()
   * @generated
   * @ordered
   */
  protected ConditionOperator operator;

  /**
   * The cached value of the '{@link #getRightExpression() <em>Right Expression</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRightExpression()
   * @generated
   * @ordered
   */
  protected Expression rightExpression;

  /**
   * The default value of the '{@link #isTrue() <em>True</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isTrue()
   * @generated
   * @ordered
   */
  protected static final boolean TRUE_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isTrue() <em>True</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isTrue()
   * @generated
   * @ordered
   */
  protected boolean true_ = TRUE_EDEFAULT;

  /**
   * The default value of the '{@link #isFalse() <em>False</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isFalse()
   * @generated
   * @ordered
   */
  protected static final boolean FALSE_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isFalse() <em>False</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isFalse()
   * @generated
   * @ordered
   */
  protected boolean false_ = FALSE_EDEFAULT;

  /**
   * The cached value of the '{@link #getLogicOp() <em>Logic Op</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLogicOp()
   * @generated
   * @ordered
   */
  protected WhereLogicOp logicOp;

  /**
   * The cached value of the '{@link #getContinuation() <em>Continuation</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getContinuation()
   * @generated
   * @ordered
   */
  protected WhereCompareCondition continuation;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected WhereCompareConditionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return AiocPackage.Literals.WHERE_COMPARE_CONDITION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public WhereExpressionBasicTerm getLeftExpression()
  {
    return leftExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetLeftExpression(WhereExpressionBasicTerm newLeftExpression, NotificationChain msgs)
  {
    WhereExpressionBasicTerm oldLeftExpression = leftExpression;
    leftExpression = newLeftExpression;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AiocPackage.WHERE_COMPARE_CONDITION__LEFT_EXPRESSION, oldLeftExpression, newLeftExpression);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setLeftExpression(WhereExpressionBasicTerm newLeftExpression)
  {
    if (newLeftExpression != leftExpression)
    {
      NotificationChain msgs = null;
      if (leftExpression != null)
        msgs = ((InternalEObject)leftExpression).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AiocPackage.WHERE_COMPARE_CONDITION__LEFT_EXPRESSION, null, msgs);
      if (newLeftExpression != null)
        msgs = ((InternalEObject)newLeftExpression).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AiocPackage.WHERE_COMPARE_CONDITION__LEFT_EXPRESSION, null, msgs);
      msgs = basicSetLeftExpression(newLeftExpression, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AiocPackage.WHERE_COMPARE_CONDITION__LEFT_EXPRESSION, newLeftExpression, newLeftExpression));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ConditionOperator getOperator()
  {
    return operator;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetOperator(ConditionOperator newOperator, NotificationChain msgs)
  {
    ConditionOperator oldOperator = operator;
    operator = newOperator;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AiocPackage.WHERE_COMPARE_CONDITION__OPERATOR, oldOperator, newOperator);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setOperator(ConditionOperator newOperator)
  {
    if (newOperator != operator)
    {
      NotificationChain msgs = null;
      if (operator != null)
        msgs = ((InternalEObject)operator).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AiocPackage.WHERE_COMPARE_CONDITION__OPERATOR, null, msgs);
      if (newOperator != null)
        msgs = ((InternalEObject)newOperator).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AiocPackage.WHERE_COMPARE_CONDITION__OPERATOR, null, msgs);
      msgs = basicSetOperator(newOperator, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AiocPackage.WHERE_COMPARE_CONDITION__OPERATOR, newOperator, newOperator));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Expression getRightExpression()
  {
    return rightExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetRightExpression(Expression newRightExpression, NotificationChain msgs)
  {
    Expression oldRightExpression = rightExpression;
    rightExpression = newRightExpression;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AiocPackage.WHERE_COMPARE_CONDITION__RIGHT_EXPRESSION, oldRightExpression, newRightExpression);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setRightExpression(Expression newRightExpression)
  {
    if (newRightExpression != rightExpression)
    {
      NotificationChain msgs = null;
      if (rightExpression != null)
        msgs = ((InternalEObject)rightExpression).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AiocPackage.WHERE_COMPARE_CONDITION__RIGHT_EXPRESSION, null, msgs);
      if (newRightExpression != null)
        msgs = ((InternalEObject)newRightExpression).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AiocPackage.WHERE_COMPARE_CONDITION__RIGHT_EXPRESSION, null, msgs);
      msgs = basicSetRightExpression(newRightExpression, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AiocPackage.WHERE_COMPARE_CONDITION__RIGHT_EXPRESSION, newRightExpression, newRightExpression));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isTrue()
  {
    return true_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setTrue(boolean newTrue)
  {
    boolean oldTrue = true_;
    true_ = newTrue;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AiocPackage.WHERE_COMPARE_CONDITION__TRUE, oldTrue, true_));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isFalse()
  {
    return false_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setFalse(boolean newFalse)
  {
    boolean oldFalse = false_;
    false_ = newFalse;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AiocPackage.WHERE_COMPARE_CONDITION__FALSE, oldFalse, false_));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public WhereLogicOp getLogicOp()
  {
    return logicOp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetLogicOp(WhereLogicOp newLogicOp, NotificationChain msgs)
  {
    WhereLogicOp oldLogicOp = logicOp;
    logicOp = newLogicOp;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AiocPackage.WHERE_COMPARE_CONDITION__LOGIC_OP, oldLogicOp, newLogicOp);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setLogicOp(WhereLogicOp newLogicOp)
  {
    if (newLogicOp != logicOp)
    {
      NotificationChain msgs = null;
      if (logicOp != null)
        msgs = ((InternalEObject)logicOp).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AiocPackage.WHERE_COMPARE_CONDITION__LOGIC_OP, null, msgs);
      if (newLogicOp != null)
        msgs = ((InternalEObject)newLogicOp).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AiocPackage.WHERE_COMPARE_CONDITION__LOGIC_OP, null, msgs);
      msgs = basicSetLogicOp(newLogicOp, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AiocPackage.WHERE_COMPARE_CONDITION__LOGIC_OP, newLogicOp, newLogicOp));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public WhereCompareCondition getContinuation()
  {
    return continuation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetContinuation(WhereCompareCondition newContinuation, NotificationChain msgs)
  {
    WhereCompareCondition oldContinuation = continuation;
    continuation = newContinuation;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AiocPackage.WHERE_COMPARE_CONDITION__CONTINUATION, oldContinuation, newContinuation);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setContinuation(WhereCompareCondition newContinuation)
  {
    if (newContinuation != continuation)
    {
      NotificationChain msgs = null;
      if (continuation != null)
        msgs = ((InternalEObject)continuation).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AiocPackage.WHERE_COMPARE_CONDITION__CONTINUATION, null, msgs);
      if (newContinuation != null)
        msgs = ((InternalEObject)newContinuation).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AiocPackage.WHERE_COMPARE_CONDITION__CONTINUATION, null, msgs);
      msgs = basicSetContinuation(newContinuation, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AiocPackage.WHERE_COMPARE_CONDITION__CONTINUATION, newContinuation, newContinuation));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case AiocPackage.WHERE_COMPARE_CONDITION__LEFT_EXPRESSION:
        return basicSetLeftExpression(null, msgs);
      case AiocPackage.WHERE_COMPARE_CONDITION__OPERATOR:
        return basicSetOperator(null, msgs);
      case AiocPackage.WHERE_COMPARE_CONDITION__RIGHT_EXPRESSION:
        return basicSetRightExpression(null, msgs);
      case AiocPackage.WHERE_COMPARE_CONDITION__LOGIC_OP:
        return basicSetLogicOp(null, msgs);
      case AiocPackage.WHERE_COMPARE_CONDITION__CONTINUATION:
        return basicSetContinuation(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case AiocPackage.WHERE_COMPARE_CONDITION__LEFT_EXPRESSION:
        return getLeftExpression();
      case AiocPackage.WHERE_COMPARE_CONDITION__OPERATOR:
        return getOperator();
      case AiocPackage.WHERE_COMPARE_CONDITION__RIGHT_EXPRESSION:
        return getRightExpression();
      case AiocPackage.WHERE_COMPARE_CONDITION__TRUE:
        return isTrue();
      case AiocPackage.WHERE_COMPARE_CONDITION__FALSE:
        return isFalse();
      case AiocPackage.WHERE_COMPARE_CONDITION__LOGIC_OP:
        return getLogicOp();
      case AiocPackage.WHERE_COMPARE_CONDITION__CONTINUATION:
        return getContinuation();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case AiocPackage.WHERE_COMPARE_CONDITION__LEFT_EXPRESSION:
        setLeftExpression((WhereExpressionBasicTerm)newValue);
        return;
      case AiocPackage.WHERE_COMPARE_CONDITION__OPERATOR:
        setOperator((ConditionOperator)newValue);
        return;
      case AiocPackage.WHERE_COMPARE_CONDITION__RIGHT_EXPRESSION:
        setRightExpression((Expression)newValue);
        return;
      case AiocPackage.WHERE_COMPARE_CONDITION__TRUE:
        setTrue((Boolean)newValue);
        return;
      case AiocPackage.WHERE_COMPARE_CONDITION__FALSE:
        setFalse((Boolean)newValue);
        return;
      case AiocPackage.WHERE_COMPARE_CONDITION__LOGIC_OP:
        setLogicOp((WhereLogicOp)newValue);
        return;
      case AiocPackage.WHERE_COMPARE_CONDITION__CONTINUATION:
        setContinuation((WhereCompareCondition)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case AiocPackage.WHERE_COMPARE_CONDITION__LEFT_EXPRESSION:
        setLeftExpression((WhereExpressionBasicTerm)null);
        return;
      case AiocPackage.WHERE_COMPARE_CONDITION__OPERATOR:
        setOperator((ConditionOperator)null);
        return;
      case AiocPackage.WHERE_COMPARE_CONDITION__RIGHT_EXPRESSION:
        setRightExpression((Expression)null);
        return;
      case AiocPackage.WHERE_COMPARE_CONDITION__TRUE:
        setTrue(TRUE_EDEFAULT);
        return;
      case AiocPackage.WHERE_COMPARE_CONDITION__FALSE:
        setFalse(FALSE_EDEFAULT);
        return;
      case AiocPackage.WHERE_COMPARE_CONDITION__LOGIC_OP:
        setLogicOp((WhereLogicOp)null);
        return;
      case AiocPackage.WHERE_COMPARE_CONDITION__CONTINUATION:
        setContinuation((WhereCompareCondition)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case AiocPackage.WHERE_COMPARE_CONDITION__LEFT_EXPRESSION:
        return leftExpression != null;
      case AiocPackage.WHERE_COMPARE_CONDITION__OPERATOR:
        return operator != null;
      case AiocPackage.WHERE_COMPARE_CONDITION__RIGHT_EXPRESSION:
        return rightExpression != null;
      case AiocPackage.WHERE_COMPARE_CONDITION__TRUE:
        return true_ != TRUE_EDEFAULT;
      case AiocPackage.WHERE_COMPARE_CONDITION__FALSE:
        return false_ != FALSE_EDEFAULT;
      case AiocPackage.WHERE_COMPARE_CONDITION__LOGIC_OP:
        return logicOp != null;
      case AiocPackage.WHERE_COMPARE_CONDITION__CONTINUATION:
        return continuation != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (true: ");
    result.append(true_);
    result.append(", false: ");
    result.append(false_);
    result.append(')');
    return result.toString();
  }

} //WhereCompareConditionImpl
